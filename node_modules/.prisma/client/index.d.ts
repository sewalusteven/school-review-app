
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model School
 * 
 */
export type School = $Result.DefaultSelection<Prisma.$SchoolPayload>
/**
 * Model SchoolReview
 * 
 */
export type SchoolReview = $Result.DefaultSelection<Prisma.$SchoolReviewPayload>
/**
 * Model SchoolPhoto
 * 
 */
export type SchoolPhoto = $Result.DefaultSelection<Prisma.$SchoolPhotoPayload>
/**
 * Model AcademicLevel
 * 
 */
export type AcademicLevel = $Result.DefaultSelection<Prisma.$AcademicLevelPayload>
/**
 * Model Curriculum
 * 
 */
export type Curriculum = $Result.DefaultSelection<Prisma.$CurriculumPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model SchoolSubject
 * 
 */
export type SchoolSubject = $Result.DefaultSelection<Prisma.$SchoolSubjectPayload>
/**
 * Model District
 * 
 */
export type District = $Result.DefaultSelection<Prisma.$DistrictPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const PhotoType: {
  Wallpaper: 'Wallpaper',
  Thumb: 'Thumb',
  General: 'General'
};

export type PhotoType = (typeof PhotoType)[keyof typeof PhotoType]

}

export type PhotoType = $Enums.PhotoType

export const PhotoType: typeof $Enums.PhotoType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.school`: Exposes CRUD operations for the **School** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.school.findMany()
    * ```
    */
  get school(): Prisma.SchoolDelegate<ExtArgs>;

  /**
   * `prisma.schoolReview`: Exposes CRUD operations for the **SchoolReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchoolReviews
    * const schoolReviews = await prisma.schoolReview.findMany()
    * ```
    */
  get schoolReview(): Prisma.SchoolReviewDelegate<ExtArgs>;

  /**
   * `prisma.schoolPhoto`: Exposes CRUD operations for the **SchoolPhoto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchoolPhotos
    * const schoolPhotos = await prisma.schoolPhoto.findMany()
    * ```
    */
  get schoolPhoto(): Prisma.SchoolPhotoDelegate<ExtArgs>;

  /**
   * `prisma.academicLevel`: Exposes CRUD operations for the **AcademicLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicLevels
    * const academicLevels = await prisma.academicLevel.findMany()
    * ```
    */
  get academicLevel(): Prisma.AcademicLevelDelegate<ExtArgs>;

  /**
   * `prisma.curriculum`: Exposes CRUD operations for the **Curriculum** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Curricula
    * const curricula = await prisma.curriculum.findMany()
    * ```
    */
  get curriculum(): Prisma.CurriculumDelegate<ExtArgs>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs>;

  /**
   * `prisma.schoolSubject`: Exposes CRUD operations for the **SchoolSubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchoolSubjects
    * const schoolSubjects = await prisma.schoolSubject.findMany()
    * ```
    */
  get schoolSubject(): Prisma.SchoolSubjectDelegate<ExtArgs>;

  /**
   * `prisma.district`: Exposes CRUD operations for the **District** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Districts
    * const districts = await prisma.district.findMany()
    * ```
    */
  get district(): Prisma.DistrictDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    School: 'School',
    SchoolReview: 'SchoolReview',
    SchoolPhoto: 'SchoolPhoto',
    AcademicLevel: 'AcademicLevel',
    Curriculum: 'Curriculum',
    Subject: 'Subject',
    SchoolSubject: 'SchoolSubject',
    District: 'District'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'school' | 'schoolReview' | 'schoolPhoto' | 'academicLevel' | 'curriculum' | 'subject' | 'schoolSubject' | 'district'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      School: {
        payload: Prisma.$SchoolPayload<ExtArgs>
        fields: Prisma.SchoolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findFirst: {
            args: Prisma.SchoolFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findMany: {
            args: Prisma.SchoolFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          create: {
            args: Prisma.SchoolCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          createMany: {
            args: Prisma.SchoolCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SchoolDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          update: {
            args: Prisma.SchoolUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          deleteMany: {
            args: Prisma.SchoolDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SchoolUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          aggregate: {
            args: Prisma.SchoolAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSchool>
          }
          groupBy: {
            args: Prisma.SchoolGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SchoolGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolCountArgs<ExtArgs>,
            result: $Utils.Optional<SchoolCountAggregateOutputType> | number
          }
        }
      }
      SchoolReview: {
        payload: Prisma.$SchoolReviewPayload<ExtArgs>
        fields: Prisma.SchoolReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolReviewPayload>
          }
          findFirst: {
            args: Prisma.SchoolReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolReviewPayload>
          }
          findMany: {
            args: Prisma.SchoolReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolReviewPayload>[]
          }
          create: {
            args: Prisma.SchoolReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolReviewPayload>
          }
          createMany: {
            args: Prisma.SchoolReviewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SchoolReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolReviewPayload>
          }
          update: {
            args: Prisma.SchoolReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolReviewPayload>
          }
          deleteMany: {
            args: Prisma.SchoolReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SchoolReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolReviewPayload>
          }
          aggregate: {
            args: Prisma.SchoolReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSchoolReview>
          }
          groupBy: {
            args: Prisma.SchoolReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SchoolReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<SchoolReviewCountAggregateOutputType> | number
          }
        }
      }
      SchoolPhoto: {
        payload: Prisma.$SchoolPhotoPayload<ExtArgs>
        fields: Prisma.SchoolPhotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolPhotoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPhotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolPhotoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPhotoPayload>
          }
          findFirst: {
            args: Prisma.SchoolPhotoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPhotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolPhotoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPhotoPayload>
          }
          findMany: {
            args: Prisma.SchoolPhotoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPhotoPayload>[]
          }
          create: {
            args: Prisma.SchoolPhotoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPhotoPayload>
          }
          createMany: {
            args: Prisma.SchoolPhotoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SchoolPhotoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPhotoPayload>
          }
          update: {
            args: Prisma.SchoolPhotoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPhotoPayload>
          }
          deleteMany: {
            args: Prisma.SchoolPhotoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolPhotoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SchoolPhotoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPhotoPayload>
          }
          aggregate: {
            args: Prisma.SchoolPhotoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSchoolPhoto>
          }
          groupBy: {
            args: Prisma.SchoolPhotoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SchoolPhotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolPhotoCountArgs<ExtArgs>,
            result: $Utils.Optional<SchoolPhotoCountAggregateOutputType> | number
          }
        }
      }
      AcademicLevel: {
        payload: Prisma.$AcademicLevelPayload<ExtArgs>
        fields: Prisma.AcademicLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AcademicLevelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AcademicLevelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicLevelPayload>
          }
          findFirst: {
            args: Prisma.AcademicLevelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AcademicLevelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicLevelPayload>
          }
          findMany: {
            args: Prisma.AcademicLevelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicLevelPayload>[]
          }
          create: {
            args: Prisma.AcademicLevelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicLevelPayload>
          }
          createMany: {
            args: Prisma.AcademicLevelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AcademicLevelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicLevelPayload>
          }
          update: {
            args: Prisma.AcademicLevelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicLevelPayload>
          }
          deleteMany: {
            args: Prisma.AcademicLevelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AcademicLevelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AcademicLevelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicLevelPayload>
          }
          aggregate: {
            args: Prisma.AcademicLevelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAcademicLevel>
          }
          groupBy: {
            args: Prisma.AcademicLevelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AcademicLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.AcademicLevelCountArgs<ExtArgs>,
            result: $Utils.Optional<AcademicLevelCountAggregateOutputType> | number
          }
        }
      }
      Curriculum: {
        payload: Prisma.$CurriculumPayload<ExtArgs>
        fields: Prisma.CurriculumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CurriculumFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CurriculumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CurriculumFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CurriculumPayload>
          }
          findFirst: {
            args: Prisma.CurriculumFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CurriculumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CurriculumFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CurriculumPayload>
          }
          findMany: {
            args: Prisma.CurriculumFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CurriculumPayload>[]
          }
          create: {
            args: Prisma.CurriculumCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CurriculumPayload>
          }
          createMany: {
            args: Prisma.CurriculumCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CurriculumDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CurriculumPayload>
          }
          update: {
            args: Prisma.CurriculumUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CurriculumPayload>
          }
          deleteMany: {
            args: Prisma.CurriculumDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CurriculumUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CurriculumUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CurriculumPayload>
          }
          aggregate: {
            args: Prisma.CurriculumAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCurriculum>
          }
          groupBy: {
            args: Prisma.CurriculumGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CurriculumGroupByOutputType>[]
          }
          count: {
            args: Prisma.CurriculumCountArgs<ExtArgs>,
            result: $Utils.Optional<CurriculumCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>,
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      SchoolSubject: {
        payload: Prisma.$SchoolSubjectPayload<ExtArgs>
        fields: Prisma.SchoolSubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolSubjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolSubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolSubjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolSubjectPayload>
          }
          findFirst: {
            args: Prisma.SchoolSubjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolSubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolSubjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolSubjectPayload>
          }
          findMany: {
            args: Prisma.SchoolSubjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolSubjectPayload>[]
          }
          create: {
            args: Prisma.SchoolSubjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolSubjectPayload>
          }
          createMany: {
            args: Prisma.SchoolSubjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SchoolSubjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolSubjectPayload>
          }
          update: {
            args: Prisma.SchoolSubjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolSubjectPayload>
          }
          deleteMany: {
            args: Prisma.SchoolSubjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolSubjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SchoolSubjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolSubjectPayload>
          }
          aggregate: {
            args: Prisma.SchoolSubjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSchoolSubject>
          }
          groupBy: {
            args: Prisma.SchoolSubjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SchoolSubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolSubjectCountArgs<ExtArgs>,
            result: $Utils.Optional<SchoolSubjectCountAggregateOutputType> | number
          }
        }
      }
      District: {
        payload: Prisma.$DistrictPayload<ExtArgs>
        fields: Prisma.DistrictFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DistrictFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DistrictFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          findFirst: {
            args: Prisma.DistrictFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DistrictFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          findMany: {
            args: Prisma.DistrictFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>[]
          }
          create: {
            args: Prisma.DistrictCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          createMany: {
            args: Prisma.DistrictCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DistrictDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          update: {
            args: Prisma.DistrictUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          deleteMany: {
            args: Prisma.DistrictDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DistrictUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DistrictUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          aggregate: {
            args: Prisma.DistrictAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDistrict>
          }
          groupBy: {
            args: Prisma.DistrictGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DistrictGroupByOutputType>[]
          }
          count: {
            args: Prisma.DistrictCountArgs<ExtArgs>,
            result: $Utils.Optional<DistrictCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    schoolReviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schoolReviews?: boolean | UserCountOutputTypeCountSchoolReviewsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSchoolReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolReviewWhereInput
  }



  /**
   * Count Type SchoolCountOutputType
   */

  export type SchoolCountOutputType = {
    photos: number
    reviews: number
    subjects: number
  }

  export type SchoolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photos?: boolean | SchoolCountOutputTypeCountPhotosArgs
    reviews?: boolean | SchoolCountOutputTypeCountReviewsArgs
    subjects?: boolean | SchoolCountOutputTypeCountSubjectsArgs
  }

  // Custom InputTypes

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolCountOutputType
     */
    select?: SchoolCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolPhotoWhereInput
  }


  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolReviewWhereInput
  }


  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolSubjectWhereInput
  }



  /**
   * Count Type AcademicLevelCountOutputType
   */

  export type AcademicLevelCountOutputType = {
    schools: number
    subjects: number
  }

  export type AcademicLevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schools?: boolean | AcademicLevelCountOutputTypeCountSchoolsArgs
    subjects?: boolean | AcademicLevelCountOutputTypeCountSubjectsArgs
  }

  // Custom InputTypes

  /**
   * AcademicLevelCountOutputType without action
   */
  export type AcademicLevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevelCountOutputType
     */
    select?: AcademicLevelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AcademicLevelCountOutputType without action
   */
  export type AcademicLevelCountOutputTypeCountSchoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
  }


  /**
   * AcademicLevelCountOutputType without action
   */
  export type AcademicLevelCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }



  /**
   * Count Type CurriculumCountOutputType
   */

  export type CurriculumCountOutputType = {
    schools: number
    subjects: number
    levels: number
  }

  export type CurriculumCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schools?: boolean | CurriculumCountOutputTypeCountSchoolsArgs
    subjects?: boolean | CurriculumCountOutputTypeCountSubjectsArgs
    levels?: boolean | CurriculumCountOutputTypeCountLevelsArgs
  }

  // Custom InputTypes

  /**
   * CurriculumCountOutputType without action
   */
  export type CurriculumCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurriculumCountOutputType
     */
    select?: CurriculumCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CurriculumCountOutputType without action
   */
  export type CurriculumCountOutputTypeCountSchoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
  }


  /**
   * CurriculumCountOutputType without action
   */
  export type CurriculumCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }


  /**
   * CurriculumCountOutputType without action
   */
  export type CurriculumCountOutputTypeCountLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicLevelWhereInput
  }



  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    schoolsAttached: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schoolsAttached?: boolean | SubjectCountOutputTypeCountSchoolsAttachedArgs
  }

  // Custom InputTypes

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountSchoolsAttachedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolSubjectWhereInput
  }



  /**
   * Count Type DistrictCountOutputType
   */

  export type DistrictCountOutputType = {
    schools: number
  }

  export type DistrictCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schools?: boolean | DistrictCountOutputTypeCountSchoolsArgs
  }

  // Custom InputTypes

  /**
   * DistrictCountOutputType without action
   */
  export type DistrictCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistrictCountOutputType
     */
    select?: DistrictCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DistrictCountOutputType without action
   */
  export type DistrictCountOutputTypeCountSchoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    schoolReviews?: boolean | User$schoolReviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schoolReviews?: boolean | User$schoolReviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      schoolReviews: Prisma.$SchoolReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    schoolReviews<T extends User$schoolReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$schoolReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.schoolReviews
   */
  export type User$schoolReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    where?: SchoolReviewWhereInput
    orderBy?: SchoolReviewOrderByWithRelationInput | SchoolReviewOrderByWithRelationInput[]
    cursor?: SchoolReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolReviewScalarFieldEnum | SchoolReviewScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model School
   */

  export type AggregateSchool = {
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  export type SchoolAvgAggregateOutputType = {
    id: number | null
    districtId: number | null
    curriculumId: number | null
    academicLevelId: number | null
  }

  export type SchoolSumAggregateOutputType = {
    id: number | null
    districtId: number | null
    curriculumId: number | null
    academicLevelId: number | null
  }

  export type SchoolMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    districtId: number | null
    about: string | null
    history: string | null
    phoneNumber: string | null
    email: string | null
    curriculumId: number | null
    academicLevelId: number | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type SchoolMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    districtId: number | null
    about: string | null
    history: string | null
    phoneNumber: string | null
    email: string | null
    curriculumId: number | null
    academicLevelId: number | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type SchoolCountAggregateOutputType = {
    id: number
    name: number
    address: number
    districtId: number
    about: number
    history: number
    phoneNumber: number
    email: number
    curriculumId: number
    academicLevelId: number
    createdAt: number
    deletedAt: number
    _all: number
  }


  export type SchoolAvgAggregateInputType = {
    id?: true
    districtId?: true
    curriculumId?: true
    academicLevelId?: true
  }

  export type SchoolSumAggregateInputType = {
    id?: true
    districtId?: true
    curriculumId?: true
    academicLevelId?: true
  }

  export type SchoolMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    districtId?: true
    about?: true
    history?: true
    phoneNumber?: true
    email?: true
    curriculumId?: true
    academicLevelId?: true
    createdAt?: true
    deletedAt?: true
  }

  export type SchoolMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    districtId?: true
    about?: true
    history?: true
    phoneNumber?: true
    email?: true
    curriculumId?: true
    academicLevelId?: true
    createdAt?: true
    deletedAt?: true
  }

  export type SchoolCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    districtId?: true
    about?: true
    history?: true
    phoneNumber?: true
    email?: true
    curriculumId?: true
    academicLevelId?: true
    createdAt?: true
    deletedAt?: true
    _all?: true
  }

  export type SchoolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which School to aggregate.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolMaxAggregateInputType
  }

  export type GetSchoolAggregateType<T extends SchoolAggregateArgs> = {
        [P in keyof T & keyof AggregateSchool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchool[P]>
      : GetScalarType<T[P], AggregateSchool[P]>
  }




  export type SchoolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithAggregationInput | SchoolOrderByWithAggregationInput[]
    by: SchoolScalarFieldEnum[] | SchoolScalarFieldEnum
    having?: SchoolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolCountAggregateInputType | true
    _avg?: SchoolAvgAggregateInputType
    _sum?: SchoolSumAggregateInputType
    _min?: SchoolMinAggregateInputType
    _max?: SchoolMaxAggregateInputType
  }

  export type SchoolGroupByOutputType = {
    id: number
    name: string
    address: string | null
    districtId: number
    about: string | null
    history: string | null
    phoneNumber: string | null
    email: string | null
    curriculumId: number | null
    academicLevelId: number | null
    createdAt: Date
    deletedAt: Date | null
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  type GetSchoolGroupByPayload<T extends SchoolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolGroupByOutputType[P]>
        }
      >
    >


  export type SchoolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    districtId?: boolean
    about?: boolean
    history?: boolean
    phoneNumber?: boolean
    email?: boolean
    curriculumId?: boolean
    academicLevelId?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    district?: boolean | DistrictDefaultArgs<ExtArgs>
    curriculum?: boolean | School$curriculumArgs<ExtArgs>
    academicLevel?: boolean | School$academicLevelArgs<ExtArgs>
    photos?: boolean | School$photosArgs<ExtArgs>
    reviews?: boolean | School$reviewsArgs<ExtArgs>
    subjects?: boolean | School$subjectsArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    districtId?: boolean
    about?: boolean
    history?: boolean
    phoneNumber?: boolean
    email?: boolean
    curriculumId?: boolean
    academicLevelId?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }

  export type SchoolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    district?: boolean | DistrictDefaultArgs<ExtArgs>
    curriculum?: boolean | School$curriculumArgs<ExtArgs>
    academicLevel?: boolean | School$academicLevelArgs<ExtArgs>
    photos?: boolean | School$photosArgs<ExtArgs>
    reviews?: boolean | School$reviewsArgs<ExtArgs>
    subjects?: boolean | School$subjectsArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SchoolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "School"
    objects: {
      district: Prisma.$DistrictPayload<ExtArgs>
      curriculum: Prisma.$CurriculumPayload<ExtArgs> | null
      academicLevel: Prisma.$AcademicLevelPayload<ExtArgs> | null
      photos: Prisma.$SchoolPhotoPayload<ExtArgs>[]
      reviews: Prisma.$SchoolReviewPayload<ExtArgs>[]
      subjects: Prisma.$SchoolSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string | null
      districtId: number
      about: string | null
      history: string | null
      phoneNumber: string | null
      email: string | null
      curriculumId: number | null
      academicLevelId: number | null
      createdAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["school"]>
    composites: {}
  }


  type SchoolGetPayload<S extends boolean | null | undefined | SchoolDefaultArgs> = $Result.GetResult<Prisma.$SchoolPayload, S>

  type SchoolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolFindManyArgs, 'select' | 'include'> & {
      select?: SchoolCountAggregateInputType | true
    }

  export interface SchoolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['School'], meta: { name: 'School' } }
    /**
     * Find zero or one School that matches the filter.
     * @param {SchoolFindUniqueArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchoolFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolFindUniqueArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one School that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SchoolFindUniqueOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SchoolFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first School that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchoolFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindFirstArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first School that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SchoolFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.school.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.school.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolWithIdOnly = await prisma.school.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchoolFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a School.
     * @param {SchoolCreateArgs} args - Arguments to create a School.
     * @example
     * // Create one School
     * const School = await prisma.school.create({
     *   data: {
     *     // ... data to create a School
     *   }
     * })
     * 
    **/
    create<T extends SchoolCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolCreateArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Schools.
     *     @param {SchoolCreateManyArgs} args - Arguments to create many Schools.
     *     @example
     *     // Create many Schools
     *     const school = await prisma.school.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchoolCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a School.
     * @param {SchoolDeleteArgs} args - Arguments to delete one School.
     * @example
     * // Delete one School
     * const School = await prisma.school.delete({
     *   where: {
     *     // ... filter to delete one School
     *   }
     * })
     * 
    **/
    delete<T extends SchoolDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolDeleteArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one School.
     * @param {SchoolUpdateArgs} args - Arguments to update one School.
     * @example
     * // Update one School
     * const school = await prisma.school.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchoolUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolUpdateArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Schools.
     * @param {SchoolDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.school.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchoolDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const school = await prisma.school.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchoolUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one School.
     * @param {SchoolUpsertArgs} args - Arguments to update or create a School.
     * @example
     * // Update or create a School
     * const school = await prisma.school.upsert({
     *   create: {
     *     // ... data to create a School
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the School we want to update
     *   }
     * })
    **/
    upsert<T extends SchoolUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolUpsertArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.school.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolCountArgs>(
      args?: Subset<T, SchoolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAggregateArgs>(args: Subset<T, SchoolAggregateArgs>): Prisma.PrismaPromise<GetSchoolAggregateType<T>>

    /**
     * Group by School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolGroupByArgs['orderBy'] }
        : { orderBy?: SchoolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the School model
   */
  readonly fields: SchoolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for School.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    district<T extends DistrictDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DistrictDefaultArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    curriculum<T extends School$curriculumArgs<ExtArgs> = {}>(args?: Subset<T, School$curriculumArgs<ExtArgs>>): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    academicLevel<T extends School$academicLevelArgs<ExtArgs> = {}>(args?: Subset<T, School$academicLevelArgs<ExtArgs>>): Prisma__AcademicLevelClient<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    photos<T extends School$photosArgs<ExtArgs> = {}>(args?: Subset<T, School$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPhotoPayload<ExtArgs>, T, 'findMany'> | Null>;

    reviews<T extends School$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, School$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    subjects<T extends School$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, School$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the School model
   */ 
  interface SchoolFieldRefs {
    readonly id: FieldRef<"School", 'Int'>
    readonly name: FieldRef<"School", 'String'>
    readonly address: FieldRef<"School", 'String'>
    readonly districtId: FieldRef<"School", 'Int'>
    readonly about: FieldRef<"School", 'String'>
    readonly history: FieldRef<"School", 'String'>
    readonly phoneNumber: FieldRef<"School", 'String'>
    readonly email: FieldRef<"School", 'String'>
    readonly curriculumId: FieldRef<"School", 'Int'>
    readonly academicLevelId: FieldRef<"School", 'Int'>
    readonly createdAt: FieldRef<"School", 'DateTime'>
    readonly deletedAt: FieldRef<"School", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * School findUnique
   */
  export type SchoolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School findUniqueOrThrow
   */
  export type SchoolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School findFirst
   */
  export type SchoolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * School findFirstOrThrow
   */
  export type SchoolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * School findMany
   */
  export type SchoolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which Schools to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * School create
   */
  export type SchoolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to create a School.
     */
    data: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
  }


  /**
   * School createMany
   */
  export type SchoolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * School update
   */
  export type SchoolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to update a School.
     */
    data: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
    /**
     * Choose, which School to update.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School updateMany
   */
  export type SchoolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schools.
     */
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     */
    where?: SchoolWhereInput
  }


  /**
   * School upsert
   */
  export type SchoolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The filter to search for the School to update in case it exists.
     */
    where: SchoolWhereUniqueInput
    /**
     * In case the School found by the `where` argument doesn't exist, create a new School with this data.
     */
    create: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
    /**
     * In case the School was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
  }


  /**
   * School delete
   */
  export type SchoolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter which School to delete.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School deleteMany
   */
  export type SchoolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schools to delete
     */
    where?: SchoolWhereInput
  }


  /**
   * School.curriculum
   */
  export type School$curriculumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    where?: CurriculumWhereInput
  }


  /**
   * School.academicLevel
   */
  export type School$academicLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    where?: AcademicLevelWhereInput
  }


  /**
   * School.photos
   */
  export type School$photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
    where?: SchoolPhotoWhereInput
    orderBy?: SchoolPhotoOrderByWithRelationInput | SchoolPhotoOrderByWithRelationInput[]
    cursor?: SchoolPhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolPhotoScalarFieldEnum | SchoolPhotoScalarFieldEnum[]
  }


  /**
   * School.reviews
   */
  export type School$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    where?: SchoolReviewWhereInput
    orderBy?: SchoolReviewOrderByWithRelationInput | SchoolReviewOrderByWithRelationInput[]
    cursor?: SchoolReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolReviewScalarFieldEnum | SchoolReviewScalarFieldEnum[]
  }


  /**
   * School.subjects
   */
  export type School$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    where?: SchoolSubjectWhereInput
    orderBy?: SchoolSubjectOrderByWithRelationInput | SchoolSubjectOrderByWithRelationInput[]
    cursor?: SchoolSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolSubjectScalarFieldEnum | SchoolSubjectScalarFieldEnum[]
  }


  /**
   * School without action
   */
  export type SchoolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
  }



  /**
   * Model SchoolReview
   */

  export type AggregateSchoolReview = {
    _count: SchoolReviewCountAggregateOutputType | null
    _avg: SchoolReviewAvgAggregateOutputType | null
    _sum: SchoolReviewSumAggregateOutputType | null
    _min: SchoolReviewMinAggregateOutputType | null
    _max: SchoolReviewMaxAggregateOutputType | null
  }

  export type SchoolReviewAvgAggregateOutputType = {
    id: number | null
    rating: number | null
    userId: number | null
    schoolId: number | null
  }

  export type SchoolReviewSumAggregateOutputType = {
    id: number | null
    rating: number | null
    userId: number | null
    schoolId: number | null
  }

  export type SchoolReviewMinAggregateOutputType = {
    id: number | null
    title: string | null
    review: string | null
    rating: number | null
    userId: number | null
    schoolId: number | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type SchoolReviewMaxAggregateOutputType = {
    id: number | null
    title: string | null
    review: string | null
    rating: number | null
    userId: number | null
    schoolId: number | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type SchoolReviewCountAggregateOutputType = {
    id: number
    title: number
    review: number
    rating: number
    userId: number
    schoolId: number
    createdAt: number
    deletedAt: number
    _all: number
  }


  export type SchoolReviewAvgAggregateInputType = {
    id?: true
    rating?: true
    userId?: true
    schoolId?: true
  }

  export type SchoolReviewSumAggregateInputType = {
    id?: true
    rating?: true
    userId?: true
    schoolId?: true
  }

  export type SchoolReviewMinAggregateInputType = {
    id?: true
    title?: true
    review?: true
    rating?: true
    userId?: true
    schoolId?: true
    createdAt?: true
    deletedAt?: true
  }

  export type SchoolReviewMaxAggregateInputType = {
    id?: true
    title?: true
    review?: true
    rating?: true
    userId?: true
    schoolId?: true
    createdAt?: true
    deletedAt?: true
  }

  export type SchoolReviewCountAggregateInputType = {
    id?: true
    title?: true
    review?: true
    rating?: true
    userId?: true
    schoolId?: true
    createdAt?: true
    deletedAt?: true
    _all?: true
  }

  export type SchoolReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolReview to aggregate.
     */
    where?: SchoolReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolReviews to fetch.
     */
    orderBy?: SchoolReviewOrderByWithRelationInput | SchoolReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchoolReviews
    **/
    _count?: true | SchoolReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolReviewMaxAggregateInputType
  }

  export type GetSchoolReviewAggregateType<T extends SchoolReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateSchoolReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchoolReview[P]>
      : GetScalarType<T[P], AggregateSchoolReview[P]>
  }




  export type SchoolReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolReviewWhereInput
    orderBy?: SchoolReviewOrderByWithAggregationInput | SchoolReviewOrderByWithAggregationInput[]
    by: SchoolReviewScalarFieldEnum[] | SchoolReviewScalarFieldEnum
    having?: SchoolReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolReviewCountAggregateInputType | true
    _avg?: SchoolReviewAvgAggregateInputType
    _sum?: SchoolReviewSumAggregateInputType
    _min?: SchoolReviewMinAggregateInputType
    _max?: SchoolReviewMaxAggregateInputType
  }

  export type SchoolReviewGroupByOutputType = {
    id: number
    title: string
    review: string
    rating: number
    userId: number | null
    schoolId: number
    createdAt: Date
    deletedAt: Date | null
    _count: SchoolReviewCountAggregateOutputType | null
    _avg: SchoolReviewAvgAggregateOutputType | null
    _sum: SchoolReviewSumAggregateOutputType | null
    _min: SchoolReviewMinAggregateOutputType | null
    _max: SchoolReviewMaxAggregateOutputType | null
  }

  type GetSchoolReviewGroupByPayload<T extends SchoolReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolReviewGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolReviewGroupByOutputType[P]>
        }
      >
    >


  export type SchoolReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    review?: boolean
    rating?: boolean
    userId?: boolean
    schoolId?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    user?: boolean | SchoolReview$userArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schoolReview"]>

  export type SchoolReviewSelectScalar = {
    id?: boolean
    title?: boolean
    review?: boolean
    rating?: boolean
    userId?: boolean
    schoolId?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }

  export type SchoolReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SchoolReview$userArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }


  export type $SchoolReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SchoolReview"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      school: Prisma.$SchoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      review: string
      rating: number
      userId: number | null
      schoolId: number
      createdAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["schoolReview"]>
    composites: {}
  }


  type SchoolReviewGetPayload<S extends boolean | null | undefined | SchoolReviewDefaultArgs> = $Result.GetResult<Prisma.$SchoolReviewPayload, S>

  type SchoolReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolReviewFindManyArgs, 'select' | 'include'> & {
      select?: SchoolReviewCountAggregateInputType | true
    }

  export interface SchoolReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SchoolReview'], meta: { name: 'SchoolReview' } }
    /**
     * Find zero or one SchoolReview that matches the filter.
     * @param {SchoolReviewFindUniqueArgs} args - Arguments to find a SchoolReview
     * @example
     * // Get one SchoolReview
     * const schoolReview = await prisma.schoolReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchoolReviewFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolReviewFindUniqueArgs<ExtArgs>>
    ): Prisma__SchoolReviewClient<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SchoolReview that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SchoolReviewFindUniqueOrThrowArgs} args - Arguments to find a SchoolReview
     * @example
     * // Get one SchoolReview
     * const schoolReview = await prisma.schoolReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SchoolReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolReviewClient<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SchoolReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolReviewFindFirstArgs} args - Arguments to find a SchoolReview
     * @example
     * // Get one SchoolReview
     * const schoolReview = await prisma.schoolReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchoolReviewFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolReviewFindFirstArgs<ExtArgs>>
    ): Prisma__SchoolReviewClient<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SchoolReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolReviewFindFirstOrThrowArgs} args - Arguments to find a SchoolReview
     * @example
     * // Get one SchoolReview
     * const schoolReview = await prisma.schoolReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SchoolReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolReviewClient<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SchoolReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchoolReviews
     * const schoolReviews = await prisma.schoolReview.findMany()
     * 
     * // Get first 10 SchoolReviews
     * const schoolReviews = await prisma.schoolReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolReviewWithIdOnly = await prisma.schoolReview.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchoolReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SchoolReview.
     * @param {SchoolReviewCreateArgs} args - Arguments to create a SchoolReview.
     * @example
     * // Create one SchoolReview
     * const SchoolReview = await prisma.schoolReview.create({
     *   data: {
     *     // ... data to create a SchoolReview
     *   }
     * })
     * 
    **/
    create<T extends SchoolReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolReviewCreateArgs<ExtArgs>>
    ): Prisma__SchoolReviewClient<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SchoolReviews.
     *     @param {SchoolReviewCreateManyArgs} args - Arguments to create many SchoolReviews.
     *     @example
     *     // Create many SchoolReviews
     *     const schoolReview = await prisma.schoolReview.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchoolReviewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolReviewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SchoolReview.
     * @param {SchoolReviewDeleteArgs} args - Arguments to delete one SchoolReview.
     * @example
     * // Delete one SchoolReview
     * const SchoolReview = await prisma.schoolReview.delete({
     *   where: {
     *     // ... filter to delete one SchoolReview
     *   }
     * })
     * 
    **/
    delete<T extends SchoolReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolReviewDeleteArgs<ExtArgs>>
    ): Prisma__SchoolReviewClient<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SchoolReview.
     * @param {SchoolReviewUpdateArgs} args - Arguments to update one SchoolReview.
     * @example
     * // Update one SchoolReview
     * const schoolReview = await prisma.schoolReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchoolReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolReviewUpdateArgs<ExtArgs>>
    ): Prisma__SchoolReviewClient<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SchoolReviews.
     * @param {SchoolReviewDeleteManyArgs} args - Arguments to filter SchoolReviews to delete.
     * @example
     * // Delete a few SchoolReviews
     * const { count } = await prisma.schoolReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchoolReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchoolReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchoolReviews
     * const schoolReview = await prisma.schoolReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchoolReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SchoolReview.
     * @param {SchoolReviewUpsertArgs} args - Arguments to update or create a SchoolReview.
     * @example
     * // Update or create a SchoolReview
     * const schoolReview = await prisma.schoolReview.upsert({
     *   create: {
     *     // ... data to create a SchoolReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchoolReview we want to update
     *   }
     * })
    **/
    upsert<T extends SchoolReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolReviewUpsertArgs<ExtArgs>>
    ): Prisma__SchoolReviewClient<$Result.GetResult<Prisma.$SchoolReviewPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SchoolReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolReviewCountArgs} args - Arguments to filter SchoolReviews to count.
     * @example
     * // Count the number of SchoolReviews
     * const count = await prisma.schoolReview.count({
     *   where: {
     *     // ... the filter for the SchoolReviews we want to count
     *   }
     * })
    **/
    count<T extends SchoolReviewCountArgs>(
      args?: Subset<T, SchoolReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchoolReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolReviewAggregateArgs>(args: Subset<T, SchoolReviewAggregateArgs>): Prisma.PrismaPromise<GetSchoolReviewAggregateType<T>>

    /**
     * Group by SchoolReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolReviewGroupByArgs['orderBy'] }
        : { orderBy?: SchoolReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SchoolReview model
   */
  readonly fields: SchoolReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SchoolReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends SchoolReview$userArgs<ExtArgs> = {}>(args?: Subset<T, SchoolReview$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SchoolReview model
   */ 
  interface SchoolReviewFieldRefs {
    readonly id: FieldRef<"SchoolReview", 'Int'>
    readonly title: FieldRef<"SchoolReview", 'String'>
    readonly review: FieldRef<"SchoolReview", 'String'>
    readonly rating: FieldRef<"SchoolReview", 'Int'>
    readonly userId: FieldRef<"SchoolReview", 'Int'>
    readonly schoolId: FieldRef<"SchoolReview", 'Int'>
    readonly createdAt: FieldRef<"SchoolReview", 'DateTime'>
    readonly deletedAt: FieldRef<"SchoolReview", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * SchoolReview findUnique
   */
  export type SchoolReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    /**
     * Filter, which SchoolReview to fetch.
     */
    where: SchoolReviewWhereUniqueInput
  }


  /**
   * SchoolReview findUniqueOrThrow
   */
  export type SchoolReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    /**
     * Filter, which SchoolReview to fetch.
     */
    where: SchoolReviewWhereUniqueInput
  }


  /**
   * SchoolReview findFirst
   */
  export type SchoolReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    /**
     * Filter, which SchoolReview to fetch.
     */
    where?: SchoolReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolReviews to fetch.
     */
    orderBy?: SchoolReviewOrderByWithRelationInput | SchoolReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolReviews.
     */
    cursor?: SchoolReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolReviews.
     */
    distinct?: SchoolReviewScalarFieldEnum | SchoolReviewScalarFieldEnum[]
  }


  /**
   * SchoolReview findFirstOrThrow
   */
  export type SchoolReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    /**
     * Filter, which SchoolReview to fetch.
     */
    where?: SchoolReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolReviews to fetch.
     */
    orderBy?: SchoolReviewOrderByWithRelationInput | SchoolReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolReviews.
     */
    cursor?: SchoolReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolReviews.
     */
    distinct?: SchoolReviewScalarFieldEnum | SchoolReviewScalarFieldEnum[]
  }


  /**
   * SchoolReview findMany
   */
  export type SchoolReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    /**
     * Filter, which SchoolReviews to fetch.
     */
    where?: SchoolReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolReviews to fetch.
     */
    orderBy?: SchoolReviewOrderByWithRelationInput | SchoolReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchoolReviews.
     */
    cursor?: SchoolReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolReviews.
     */
    skip?: number
    distinct?: SchoolReviewScalarFieldEnum | SchoolReviewScalarFieldEnum[]
  }


  /**
   * SchoolReview create
   */
  export type SchoolReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a SchoolReview.
     */
    data: XOR<SchoolReviewCreateInput, SchoolReviewUncheckedCreateInput>
  }


  /**
   * SchoolReview createMany
   */
  export type SchoolReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SchoolReviews.
     */
    data: SchoolReviewCreateManyInput | SchoolReviewCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SchoolReview update
   */
  export type SchoolReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a SchoolReview.
     */
    data: XOR<SchoolReviewUpdateInput, SchoolReviewUncheckedUpdateInput>
    /**
     * Choose, which SchoolReview to update.
     */
    where: SchoolReviewWhereUniqueInput
  }


  /**
   * SchoolReview updateMany
   */
  export type SchoolReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SchoolReviews.
     */
    data: XOR<SchoolReviewUpdateManyMutationInput, SchoolReviewUncheckedUpdateManyInput>
    /**
     * Filter which SchoolReviews to update
     */
    where?: SchoolReviewWhereInput
  }


  /**
   * SchoolReview upsert
   */
  export type SchoolReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the SchoolReview to update in case it exists.
     */
    where: SchoolReviewWhereUniqueInput
    /**
     * In case the SchoolReview found by the `where` argument doesn't exist, create a new SchoolReview with this data.
     */
    create: XOR<SchoolReviewCreateInput, SchoolReviewUncheckedCreateInput>
    /**
     * In case the SchoolReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolReviewUpdateInput, SchoolReviewUncheckedUpdateInput>
  }


  /**
   * SchoolReview delete
   */
  export type SchoolReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
    /**
     * Filter which SchoolReview to delete.
     */
    where: SchoolReviewWhereUniqueInput
  }


  /**
   * SchoolReview deleteMany
   */
  export type SchoolReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolReviews to delete
     */
    where?: SchoolReviewWhereInput
  }


  /**
   * SchoolReview.user
   */
  export type SchoolReview$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * SchoolReview without action
   */
  export type SchoolReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolReview
     */
    select?: SchoolReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolReviewInclude<ExtArgs> | null
  }



  /**
   * Model SchoolPhoto
   */

  export type AggregateSchoolPhoto = {
    _count: SchoolPhotoCountAggregateOutputType | null
    _avg: SchoolPhotoAvgAggregateOutputType | null
    _sum: SchoolPhotoSumAggregateOutputType | null
    _min: SchoolPhotoMinAggregateOutputType | null
    _max: SchoolPhotoMaxAggregateOutputType | null
  }

  export type SchoolPhotoAvgAggregateOutputType = {
    id: number | null
    schoolId: number | null
  }

  export type SchoolPhotoSumAggregateOutputType = {
    id: number | null
    schoolId: number | null
  }

  export type SchoolPhotoMinAggregateOutputType = {
    id: number | null
    path: string | null
    type: $Enums.PhotoType | null
    schoolId: number | null
    createdAt: Date | null
  }

  export type SchoolPhotoMaxAggregateOutputType = {
    id: number | null
    path: string | null
    type: $Enums.PhotoType | null
    schoolId: number | null
    createdAt: Date | null
  }

  export type SchoolPhotoCountAggregateOutputType = {
    id: number
    path: number
    type: number
    schoolId: number
    createdAt: number
    _all: number
  }


  export type SchoolPhotoAvgAggregateInputType = {
    id?: true
    schoolId?: true
  }

  export type SchoolPhotoSumAggregateInputType = {
    id?: true
    schoolId?: true
  }

  export type SchoolPhotoMinAggregateInputType = {
    id?: true
    path?: true
    type?: true
    schoolId?: true
    createdAt?: true
  }

  export type SchoolPhotoMaxAggregateInputType = {
    id?: true
    path?: true
    type?: true
    schoolId?: true
    createdAt?: true
  }

  export type SchoolPhotoCountAggregateInputType = {
    id?: true
    path?: true
    type?: true
    schoolId?: true
    createdAt?: true
    _all?: true
  }

  export type SchoolPhotoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolPhoto to aggregate.
     */
    where?: SchoolPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolPhotos to fetch.
     */
    orderBy?: SchoolPhotoOrderByWithRelationInput | SchoolPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchoolPhotos
    **/
    _count?: true | SchoolPhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolPhotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolPhotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolPhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolPhotoMaxAggregateInputType
  }

  export type GetSchoolPhotoAggregateType<T extends SchoolPhotoAggregateArgs> = {
        [P in keyof T & keyof AggregateSchoolPhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchoolPhoto[P]>
      : GetScalarType<T[P], AggregateSchoolPhoto[P]>
  }




  export type SchoolPhotoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolPhotoWhereInput
    orderBy?: SchoolPhotoOrderByWithAggregationInput | SchoolPhotoOrderByWithAggregationInput[]
    by: SchoolPhotoScalarFieldEnum[] | SchoolPhotoScalarFieldEnum
    having?: SchoolPhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolPhotoCountAggregateInputType | true
    _avg?: SchoolPhotoAvgAggregateInputType
    _sum?: SchoolPhotoSumAggregateInputType
    _min?: SchoolPhotoMinAggregateInputType
    _max?: SchoolPhotoMaxAggregateInputType
  }

  export type SchoolPhotoGroupByOutputType = {
    id: number
    path: string
    type: $Enums.PhotoType
    schoolId: number | null
    createdAt: Date
    _count: SchoolPhotoCountAggregateOutputType | null
    _avg: SchoolPhotoAvgAggregateOutputType | null
    _sum: SchoolPhotoSumAggregateOutputType | null
    _min: SchoolPhotoMinAggregateOutputType | null
    _max: SchoolPhotoMaxAggregateOutputType | null
  }

  type GetSchoolPhotoGroupByPayload<T extends SchoolPhotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolPhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolPhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolPhotoGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolPhotoGroupByOutputType[P]>
        }
      >
    >


  export type SchoolPhotoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    type?: boolean
    schoolId?: boolean
    createdAt?: boolean
    school?: boolean | SchoolPhoto$schoolArgs<ExtArgs>
  }, ExtArgs["result"]["schoolPhoto"]>

  export type SchoolPhotoSelectScalar = {
    id?: boolean
    path?: boolean
    type?: boolean
    schoolId?: boolean
    createdAt?: boolean
  }

  export type SchoolPhotoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolPhoto$schoolArgs<ExtArgs>
  }


  export type $SchoolPhotoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SchoolPhoto"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      path: string
      type: $Enums.PhotoType
      schoolId: number | null
      createdAt: Date
    }, ExtArgs["result"]["schoolPhoto"]>
    composites: {}
  }


  type SchoolPhotoGetPayload<S extends boolean | null | undefined | SchoolPhotoDefaultArgs> = $Result.GetResult<Prisma.$SchoolPhotoPayload, S>

  type SchoolPhotoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolPhotoFindManyArgs, 'select' | 'include'> & {
      select?: SchoolPhotoCountAggregateInputType | true
    }

  export interface SchoolPhotoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SchoolPhoto'], meta: { name: 'SchoolPhoto' } }
    /**
     * Find zero or one SchoolPhoto that matches the filter.
     * @param {SchoolPhotoFindUniqueArgs} args - Arguments to find a SchoolPhoto
     * @example
     * // Get one SchoolPhoto
     * const schoolPhoto = await prisma.schoolPhoto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchoolPhotoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolPhotoFindUniqueArgs<ExtArgs>>
    ): Prisma__SchoolPhotoClient<$Result.GetResult<Prisma.$SchoolPhotoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SchoolPhoto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SchoolPhotoFindUniqueOrThrowArgs} args - Arguments to find a SchoolPhoto
     * @example
     * // Get one SchoolPhoto
     * const schoolPhoto = await prisma.schoolPhoto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SchoolPhotoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolPhotoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolPhotoClient<$Result.GetResult<Prisma.$SchoolPhotoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SchoolPhoto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolPhotoFindFirstArgs} args - Arguments to find a SchoolPhoto
     * @example
     * // Get one SchoolPhoto
     * const schoolPhoto = await prisma.schoolPhoto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchoolPhotoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolPhotoFindFirstArgs<ExtArgs>>
    ): Prisma__SchoolPhotoClient<$Result.GetResult<Prisma.$SchoolPhotoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SchoolPhoto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolPhotoFindFirstOrThrowArgs} args - Arguments to find a SchoolPhoto
     * @example
     * // Get one SchoolPhoto
     * const schoolPhoto = await prisma.schoolPhoto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SchoolPhotoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolPhotoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolPhotoClient<$Result.GetResult<Prisma.$SchoolPhotoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SchoolPhotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolPhotoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchoolPhotos
     * const schoolPhotos = await prisma.schoolPhoto.findMany()
     * 
     * // Get first 10 SchoolPhotos
     * const schoolPhotos = await prisma.schoolPhoto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolPhotoWithIdOnly = await prisma.schoolPhoto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchoolPhotoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolPhotoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPhotoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SchoolPhoto.
     * @param {SchoolPhotoCreateArgs} args - Arguments to create a SchoolPhoto.
     * @example
     * // Create one SchoolPhoto
     * const SchoolPhoto = await prisma.schoolPhoto.create({
     *   data: {
     *     // ... data to create a SchoolPhoto
     *   }
     * })
     * 
    **/
    create<T extends SchoolPhotoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolPhotoCreateArgs<ExtArgs>>
    ): Prisma__SchoolPhotoClient<$Result.GetResult<Prisma.$SchoolPhotoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SchoolPhotos.
     *     @param {SchoolPhotoCreateManyArgs} args - Arguments to create many SchoolPhotos.
     *     @example
     *     // Create many SchoolPhotos
     *     const schoolPhoto = await prisma.schoolPhoto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchoolPhotoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolPhotoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SchoolPhoto.
     * @param {SchoolPhotoDeleteArgs} args - Arguments to delete one SchoolPhoto.
     * @example
     * // Delete one SchoolPhoto
     * const SchoolPhoto = await prisma.schoolPhoto.delete({
     *   where: {
     *     // ... filter to delete one SchoolPhoto
     *   }
     * })
     * 
    **/
    delete<T extends SchoolPhotoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolPhotoDeleteArgs<ExtArgs>>
    ): Prisma__SchoolPhotoClient<$Result.GetResult<Prisma.$SchoolPhotoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SchoolPhoto.
     * @param {SchoolPhotoUpdateArgs} args - Arguments to update one SchoolPhoto.
     * @example
     * // Update one SchoolPhoto
     * const schoolPhoto = await prisma.schoolPhoto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchoolPhotoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolPhotoUpdateArgs<ExtArgs>>
    ): Prisma__SchoolPhotoClient<$Result.GetResult<Prisma.$SchoolPhotoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SchoolPhotos.
     * @param {SchoolPhotoDeleteManyArgs} args - Arguments to filter SchoolPhotos to delete.
     * @example
     * // Delete a few SchoolPhotos
     * const { count } = await prisma.schoolPhoto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchoolPhotoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolPhotoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchoolPhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolPhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchoolPhotos
     * const schoolPhoto = await prisma.schoolPhoto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchoolPhotoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolPhotoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SchoolPhoto.
     * @param {SchoolPhotoUpsertArgs} args - Arguments to update or create a SchoolPhoto.
     * @example
     * // Update or create a SchoolPhoto
     * const schoolPhoto = await prisma.schoolPhoto.upsert({
     *   create: {
     *     // ... data to create a SchoolPhoto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchoolPhoto we want to update
     *   }
     * })
    **/
    upsert<T extends SchoolPhotoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolPhotoUpsertArgs<ExtArgs>>
    ): Prisma__SchoolPhotoClient<$Result.GetResult<Prisma.$SchoolPhotoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SchoolPhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolPhotoCountArgs} args - Arguments to filter SchoolPhotos to count.
     * @example
     * // Count the number of SchoolPhotos
     * const count = await prisma.schoolPhoto.count({
     *   where: {
     *     // ... the filter for the SchoolPhotos we want to count
     *   }
     * })
    **/
    count<T extends SchoolPhotoCountArgs>(
      args?: Subset<T, SchoolPhotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolPhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchoolPhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolPhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolPhotoAggregateArgs>(args: Subset<T, SchoolPhotoAggregateArgs>): Prisma.PrismaPromise<GetSchoolPhotoAggregateType<T>>

    /**
     * Group by SchoolPhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolPhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolPhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolPhotoGroupByArgs['orderBy'] }
        : { orderBy?: SchoolPhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolPhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolPhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SchoolPhoto model
   */
  readonly fields: SchoolPhotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SchoolPhoto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolPhotoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    school<T extends SchoolPhoto$schoolArgs<ExtArgs> = {}>(args?: Subset<T, SchoolPhoto$schoolArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SchoolPhoto model
   */ 
  interface SchoolPhotoFieldRefs {
    readonly id: FieldRef<"SchoolPhoto", 'Int'>
    readonly path: FieldRef<"SchoolPhoto", 'String'>
    readonly type: FieldRef<"SchoolPhoto", 'PhotoType'>
    readonly schoolId: FieldRef<"SchoolPhoto", 'Int'>
    readonly createdAt: FieldRef<"SchoolPhoto", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * SchoolPhoto findUnique
   */
  export type SchoolPhotoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
    /**
     * Filter, which SchoolPhoto to fetch.
     */
    where: SchoolPhotoWhereUniqueInput
  }


  /**
   * SchoolPhoto findUniqueOrThrow
   */
  export type SchoolPhotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
    /**
     * Filter, which SchoolPhoto to fetch.
     */
    where: SchoolPhotoWhereUniqueInput
  }


  /**
   * SchoolPhoto findFirst
   */
  export type SchoolPhotoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
    /**
     * Filter, which SchoolPhoto to fetch.
     */
    where?: SchoolPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolPhotos to fetch.
     */
    orderBy?: SchoolPhotoOrderByWithRelationInput | SchoolPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolPhotos.
     */
    cursor?: SchoolPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolPhotos.
     */
    distinct?: SchoolPhotoScalarFieldEnum | SchoolPhotoScalarFieldEnum[]
  }


  /**
   * SchoolPhoto findFirstOrThrow
   */
  export type SchoolPhotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
    /**
     * Filter, which SchoolPhoto to fetch.
     */
    where?: SchoolPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolPhotos to fetch.
     */
    orderBy?: SchoolPhotoOrderByWithRelationInput | SchoolPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolPhotos.
     */
    cursor?: SchoolPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolPhotos.
     */
    distinct?: SchoolPhotoScalarFieldEnum | SchoolPhotoScalarFieldEnum[]
  }


  /**
   * SchoolPhoto findMany
   */
  export type SchoolPhotoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
    /**
     * Filter, which SchoolPhotos to fetch.
     */
    where?: SchoolPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolPhotos to fetch.
     */
    orderBy?: SchoolPhotoOrderByWithRelationInput | SchoolPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchoolPhotos.
     */
    cursor?: SchoolPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolPhotos.
     */
    skip?: number
    distinct?: SchoolPhotoScalarFieldEnum | SchoolPhotoScalarFieldEnum[]
  }


  /**
   * SchoolPhoto create
   */
  export type SchoolPhotoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
    /**
     * The data needed to create a SchoolPhoto.
     */
    data: XOR<SchoolPhotoCreateInput, SchoolPhotoUncheckedCreateInput>
  }


  /**
   * SchoolPhoto createMany
   */
  export type SchoolPhotoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SchoolPhotos.
     */
    data: SchoolPhotoCreateManyInput | SchoolPhotoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SchoolPhoto update
   */
  export type SchoolPhotoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
    /**
     * The data needed to update a SchoolPhoto.
     */
    data: XOR<SchoolPhotoUpdateInput, SchoolPhotoUncheckedUpdateInput>
    /**
     * Choose, which SchoolPhoto to update.
     */
    where: SchoolPhotoWhereUniqueInput
  }


  /**
   * SchoolPhoto updateMany
   */
  export type SchoolPhotoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SchoolPhotos.
     */
    data: XOR<SchoolPhotoUpdateManyMutationInput, SchoolPhotoUncheckedUpdateManyInput>
    /**
     * Filter which SchoolPhotos to update
     */
    where?: SchoolPhotoWhereInput
  }


  /**
   * SchoolPhoto upsert
   */
  export type SchoolPhotoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
    /**
     * The filter to search for the SchoolPhoto to update in case it exists.
     */
    where: SchoolPhotoWhereUniqueInput
    /**
     * In case the SchoolPhoto found by the `where` argument doesn't exist, create a new SchoolPhoto with this data.
     */
    create: XOR<SchoolPhotoCreateInput, SchoolPhotoUncheckedCreateInput>
    /**
     * In case the SchoolPhoto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolPhotoUpdateInput, SchoolPhotoUncheckedUpdateInput>
  }


  /**
   * SchoolPhoto delete
   */
  export type SchoolPhotoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
    /**
     * Filter which SchoolPhoto to delete.
     */
    where: SchoolPhotoWhereUniqueInput
  }


  /**
   * SchoolPhoto deleteMany
   */
  export type SchoolPhotoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolPhotos to delete
     */
    where?: SchoolPhotoWhereInput
  }


  /**
   * SchoolPhoto.school
   */
  export type SchoolPhoto$schoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
  }


  /**
   * SchoolPhoto without action
   */
  export type SchoolPhotoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolPhoto
     */
    select?: SchoolPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolPhotoInclude<ExtArgs> | null
  }



  /**
   * Model AcademicLevel
   */

  export type AggregateAcademicLevel = {
    _count: AcademicLevelCountAggregateOutputType | null
    _avg: AcademicLevelAvgAggregateOutputType | null
    _sum: AcademicLevelSumAggregateOutputType | null
    _min: AcademicLevelMinAggregateOutputType | null
    _max: AcademicLevelMaxAggregateOutputType | null
  }

  export type AcademicLevelAvgAggregateOutputType = {
    id: number | null
    curriculumId: number | null
  }

  export type AcademicLevelSumAggregateOutputType = {
    id: number | null
    curriculumId: number | null
  }

  export type AcademicLevelMinAggregateOutputType = {
    id: number | null
    level: string | null
    curriculumId: number | null
  }

  export type AcademicLevelMaxAggregateOutputType = {
    id: number | null
    level: string | null
    curriculumId: number | null
  }

  export type AcademicLevelCountAggregateOutputType = {
    id: number
    level: number
    curriculumId: number
    _all: number
  }


  export type AcademicLevelAvgAggregateInputType = {
    id?: true
    curriculumId?: true
  }

  export type AcademicLevelSumAggregateInputType = {
    id?: true
    curriculumId?: true
  }

  export type AcademicLevelMinAggregateInputType = {
    id?: true
    level?: true
    curriculumId?: true
  }

  export type AcademicLevelMaxAggregateInputType = {
    id?: true
    level?: true
    curriculumId?: true
  }

  export type AcademicLevelCountAggregateInputType = {
    id?: true
    level?: true
    curriculumId?: true
    _all?: true
  }

  export type AcademicLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicLevel to aggregate.
     */
    where?: AcademicLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicLevels to fetch.
     */
    orderBy?: AcademicLevelOrderByWithRelationInput | AcademicLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AcademicLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AcademicLevels
    **/
    _count?: true | AcademicLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AcademicLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AcademicLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcademicLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcademicLevelMaxAggregateInputType
  }

  export type GetAcademicLevelAggregateType<T extends AcademicLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateAcademicLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcademicLevel[P]>
      : GetScalarType<T[P], AggregateAcademicLevel[P]>
  }




  export type AcademicLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicLevelWhereInput
    orderBy?: AcademicLevelOrderByWithAggregationInput | AcademicLevelOrderByWithAggregationInput[]
    by: AcademicLevelScalarFieldEnum[] | AcademicLevelScalarFieldEnum
    having?: AcademicLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcademicLevelCountAggregateInputType | true
    _avg?: AcademicLevelAvgAggregateInputType
    _sum?: AcademicLevelSumAggregateInputType
    _min?: AcademicLevelMinAggregateInputType
    _max?: AcademicLevelMaxAggregateInputType
  }

  export type AcademicLevelGroupByOutputType = {
    id: number
    level: string
    curriculumId: number | null
    _count: AcademicLevelCountAggregateOutputType | null
    _avg: AcademicLevelAvgAggregateOutputType | null
    _sum: AcademicLevelSumAggregateOutputType | null
    _min: AcademicLevelMinAggregateOutputType | null
    _max: AcademicLevelMaxAggregateOutputType | null
  }

  type GetAcademicLevelGroupByPayload<T extends AcademicLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcademicLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcademicLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcademicLevelGroupByOutputType[P]>
            : GetScalarType<T[P], AcademicLevelGroupByOutputType[P]>
        }
      >
    >


  export type AcademicLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    curriculumId?: boolean
    schools?: boolean | AcademicLevel$schoolsArgs<ExtArgs>
    subjects?: boolean | AcademicLevel$subjectsArgs<ExtArgs>
    curriculum?: boolean | AcademicLevel$curriculumArgs<ExtArgs>
    _count?: boolean | AcademicLevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["academicLevel"]>

  export type AcademicLevelSelectScalar = {
    id?: boolean
    level?: boolean
    curriculumId?: boolean
  }

  export type AcademicLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schools?: boolean | AcademicLevel$schoolsArgs<ExtArgs>
    subjects?: boolean | AcademicLevel$subjectsArgs<ExtArgs>
    curriculum?: boolean | AcademicLevel$curriculumArgs<ExtArgs>
    _count?: boolean | AcademicLevelCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AcademicLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AcademicLevel"
    objects: {
      schools: Prisma.$SchoolPayload<ExtArgs>[]
      subjects: Prisma.$SubjectPayload<ExtArgs>[]
      curriculum: Prisma.$CurriculumPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      level: string
      curriculumId: number | null
    }, ExtArgs["result"]["academicLevel"]>
    composites: {}
  }


  type AcademicLevelGetPayload<S extends boolean | null | undefined | AcademicLevelDefaultArgs> = $Result.GetResult<Prisma.$AcademicLevelPayload, S>

  type AcademicLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AcademicLevelFindManyArgs, 'select' | 'include'> & {
      select?: AcademicLevelCountAggregateInputType | true
    }

  export interface AcademicLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AcademicLevel'], meta: { name: 'AcademicLevel' } }
    /**
     * Find zero or one AcademicLevel that matches the filter.
     * @param {AcademicLevelFindUniqueArgs} args - Arguments to find a AcademicLevel
     * @example
     * // Get one AcademicLevel
     * const academicLevel = await prisma.academicLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AcademicLevelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicLevelFindUniqueArgs<ExtArgs>>
    ): Prisma__AcademicLevelClient<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AcademicLevel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AcademicLevelFindUniqueOrThrowArgs} args - Arguments to find a AcademicLevel
     * @example
     * // Get one AcademicLevel
     * const academicLevel = await prisma.academicLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AcademicLevelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicLevelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AcademicLevelClient<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AcademicLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicLevelFindFirstArgs} args - Arguments to find a AcademicLevel
     * @example
     * // Get one AcademicLevel
     * const academicLevel = await prisma.academicLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AcademicLevelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicLevelFindFirstArgs<ExtArgs>>
    ): Prisma__AcademicLevelClient<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AcademicLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicLevelFindFirstOrThrowArgs} args - Arguments to find a AcademicLevel
     * @example
     * // Get one AcademicLevel
     * const academicLevel = await prisma.academicLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AcademicLevelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicLevelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AcademicLevelClient<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AcademicLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicLevelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AcademicLevels
     * const academicLevels = await prisma.academicLevel.findMany()
     * 
     * // Get first 10 AcademicLevels
     * const academicLevels = await prisma.academicLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const academicLevelWithIdOnly = await prisma.academicLevel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AcademicLevelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicLevelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AcademicLevel.
     * @param {AcademicLevelCreateArgs} args - Arguments to create a AcademicLevel.
     * @example
     * // Create one AcademicLevel
     * const AcademicLevel = await prisma.academicLevel.create({
     *   data: {
     *     // ... data to create a AcademicLevel
     *   }
     * })
     * 
    **/
    create<T extends AcademicLevelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicLevelCreateArgs<ExtArgs>>
    ): Prisma__AcademicLevelClient<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AcademicLevels.
     *     @param {AcademicLevelCreateManyArgs} args - Arguments to create many AcademicLevels.
     *     @example
     *     // Create many AcademicLevels
     *     const academicLevel = await prisma.academicLevel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AcademicLevelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicLevelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AcademicLevel.
     * @param {AcademicLevelDeleteArgs} args - Arguments to delete one AcademicLevel.
     * @example
     * // Delete one AcademicLevel
     * const AcademicLevel = await prisma.academicLevel.delete({
     *   where: {
     *     // ... filter to delete one AcademicLevel
     *   }
     * })
     * 
    **/
    delete<T extends AcademicLevelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicLevelDeleteArgs<ExtArgs>>
    ): Prisma__AcademicLevelClient<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AcademicLevel.
     * @param {AcademicLevelUpdateArgs} args - Arguments to update one AcademicLevel.
     * @example
     * // Update one AcademicLevel
     * const academicLevel = await prisma.academicLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AcademicLevelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicLevelUpdateArgs<ExtArgs>>
    ): Prisma__AcademicLevelClient<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AcademicLevels.
     * @param {AcademicLevelDeleteManyArgs} args - Arguments to filter AcademicLevels to delete.
     * @example
     * // Delete a few AcademicLevels
     * const { count } = await prisma.academicLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AcademicLevelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicLevelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AcademicLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AcademicLevels
     * const academicLevel = await prisma.academicLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AcademicLevelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicLevelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AcademicLevel.
     * @param {AcademicLevelUpsertArgs} args - Arguments to update or create a AcademicLevel.
     * @example
     * // Update or create a AcademicLevel
     * const academicLevel = await prisma.academicLevel.upsert({
     *   create: {
     *     // ... data to create a AcademicLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AcademicLevel we want to update
     *   }
     * })
    **/
    upsert<T extends AcademicLevelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicLevelUpsertArgs<ExtArgs>>
    ): Prisma__AcademicLevelClient<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AcademicLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicLevelCountArgs} args - Arguments to filter AcademicLevels to count.
     * @example
     * // Count the number of AcademicLevels
     * const count = await prisma.academicLevel.count({
     *   where: {
     *     // ... the filter for the AcademicLevels we want to count
     *   }
     * })
    **/
    count<T extends AcademicLevelCountArgs>(
      args?: Subset<T, AcademicLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcademicLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AcademicLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcademicLevelAggregateArgs>(args: Subset<T, AcademicLevelAggregateArgs>): Prisma.PrismaPromise<GetAcademicLevelAggregateType<T>>

    /**
     * Group by AcademicLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AcademicLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AcademicLevelGroupByArgs['orderBy'] }
        : { orderBy?: AcademicLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AcademicLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AcademicLevel model
   */
  readonly fields: AcademicLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AcademicLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AcademicLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    schools<T extends AcademicLevel$schoolsArgs<ExtArgs> = {}>(args?: Subset<T, AcademicLevel$schoolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findMany'> | Null>;

    subjects<T extends AcademicLevel$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, AcademicLevel$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    curriculum<T extends AcademicLevel$curriculumArgs<ExtArgs> = {}>(args?: Subset<T, AcademicLevel$curriculumArgs<ExtArgs>>): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AcademicLevel model
   */ 
  interface AcademicLevelFieldRefs {
    readonly id: FieldRef<"AcademicLevel", 'Int'>
    readonly level: FieldRef<"AcademicLevel", 'String'>
    readonly curriculumId: FieldRef<"AcademicLevel", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * AcademicLevel findUnique
   */
  export type AcademicLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    /**
     * Filter, which AcademicLevel to fetch.
     */
    where: AcademicLevelWhereUniqueInput
  }


  /**
   * AcademicLevel findUniqueOrThrow
   */
  export type AcademicLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    /**
     * Filter, which AcademicLevel to fetch.
     */
    where: AcademicLevelWhereUniqueInput
  }


  /**
   * AcademicLevel findFirst
   */
  export type AcademicLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    /**
     * Filter, which AcademicLevel to fetch.
     */
    where?: AcademicLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicLevels to fetch.
     */
    orderBy?: AcademicLevelOrderByWithRelationInput | AcademicLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicLevels.
     */
    cursor?: AcademicLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicLevels.
     */
    distinct?: AcademicLevelScalarFieldEnum | AcademicLevelScalarFieldEnum[]
  }


  /**
   * AcademicLevel findFirstOrThrow
   */
  export type AcademicLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    /**
     * Filter, which AcademicLevel to fetch.
     */
    where?: AcademicLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicLevels to fetch.
     */
    orderBy?: AcademicLevelOrderByWithRelationInput | AcademicLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicLevels.
     */
    cursor?: AcademicLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicLevels.
     */
    distinct?: AcademicLevelScalarFieldEnum | AcademicLevelScalarFieldEnum[]
  }


  /**
   * AcademicLevel findMany
   */
  export type AcademicLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    /**
     * Filter, which AcademicLevels to fetch.
     */
    where?: AcademicLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicLevels to fetch.
     */
    orderBy?: AcademicLevelOrderByWithRelationInput | AcademicLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AcademicLevels.
     */
    cursor?: AcademicLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicLevels.
     */
    skip?: number
    distinct?: AcademicLevelScalarFieldEnum | AcademicLevelScalarFieldEnum[]
  }


  /**
   * AcademicLevel create
   */
  export type AcademicLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a AcademicLevel.
     */
    data: XOR<AcademicLevelCreateInput, AcademicLevelUncheckedCreateInput>
  }


  /**
   * AcademicLevel createMany
   */
  export type AcademicLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AcademicLevels.
     */
    data: AcademicLevelCreateManyInput | AcademicLevelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AcademicLevel update
   */
  export type AcademicLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a AcademicLevel.
     */
    data: XOR<AcademicLevelUpdateInput, AcademicLevelUncheckedUpdateInput>
    /**
     * Choose, which AcademicLevel to update.
     */
    where: AcademicLevelWhereUniqueInput
  }


  /**
   * AcademicLevel updateMany
   */
  export type AcademicLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AcademicLevels.
     */
    data: XOR<AcademicLevelUpdateManyMutationInput, AcademicLevelUncheckedUpdateManyInput>
    /**
     * Filter which AcademicLevels to update
     */
    where?: AcademicLevelWhereInput
  }


  /**
   * AcademicLevel upsert
   */
  export type AcademicLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the AcademicLevel to update in case it exists.
     */
    where: AcademicLevelWhereUniqueInput
    /**
     * In case the AcademicLevel found by the `where` argument doesn't exist, create a new AcademicLevel with this data.
     */
    create: XOR<AcademicLevelCreateInput, AcademicLevelUncheckedCreateInput>
    /**
     * In case the AcademicLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AcademicLevelUpdateInput, AcademicLevelUncheckedUpdateInput>
  }


  /**
   * AcademicLevel delete
   */
  export type AcademicLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    /**
     * Filter which AcademicLevel to delete.
     */
    where: AcademicLevelWhereUniqueInput
  }


  /**
   * AcademicLevel deleteMany
   */
  export type AcademicLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicLevels to delete
     */
    where?: AcademicLevelWhereInput
  }


  /**
   * AcademicLevel.schools
   */
  export type AcademicLevel$schoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    cursor?: SchoolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * AcademicLevel.subjects
   */
  export type AcademicLevel$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * AcademicLevel.curriculum
   */
  export type AcademicLevel$curriculumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    where?: CurriculumWhereInput
  }


  /**
   * AcademicLevel without action
   */
  export type AcademicLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
  }



  /**
   * Model Curriculum
   */

  export type AggregateCurriculum = {
    _count: CurriculumCountAggregateOutputType | null
    _avg: CurriculumAvgAggregateOutputType | null
    _sum: CurriculumSumAggregateOutputType | null
    _min: CurriculumMinAggregateOutputType | null
    _max: CurriculumMaxAggregateOutputType | null
  }

  export type CurriculumAvgAggregateOutputType = {
    id: number | null
  }

  export type CurriculumSumAggregateOutputType = {
    id: number | null
  }

  export type CurriculumMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type CurriculumMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type CurriculumCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type CurriculumAvgAggregateInputType = {
    id?: true
  }

  export type CurriculumSumAggregateInputType = {
    id?: true
  }

  export type CurriculumMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type CurriculumMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type CurriculumCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type CurriculumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curriculum to aggregate.
     */
    where?: CurriculumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curricula to fetch.
     */
    orderBy?: CurriculumOrderByWithRelationInput | CurriculumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CurriculumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curricula from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curricula.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Curricula
    **/
    _count?: true | CurriculumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurriculumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurriculumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurriculumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurriculumMaxAggregateInputType
  }

  export type GetCurriculumAggregateType<T extends CurriculumAggregateArgs> = {
        [P in keyof T & keyof AggregateCurriculum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurriculum[P]>
      : GetScalarType<T[P], AggregateCurriculum[P]>
  }




  export type CurriculumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurriculumWhereInput
    orderBy?: CurriculumOrderByWithAggregationInput | CurriculumOrderByWithAggregationInput[]
    by: CurriculumScalarFieldEnum[] | CurriculumScalarFieldEnum
    having?: CurriculumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurriculumCountAggregateInputType | true
    _avg?: CurriculumAvgAggregateInputType
    _sum?: CurriculumSumAggregateInputType
    _min?: CurriculumMinAggregateInputType
    _max?: CurriculumMaxAggregateInputType
  }

  export type CurriculumGroupByOutputType = {
    id: number
    name: string
    description: string | null
    _count: CurriculumCountAggregateOutputType | null
    _avg: CurriculumAvgAggregateOutputType | null
    _sum: CurriculumSumAggregateOutputType | null
    _min: CurriculumMinAggregateOutputType | null
    _max: CurriculumMaxAggregateOutputType | null
  }

  type GetCurriculumGroupByPayload<T extends CurriculumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CurriculumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurriculumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurriculumGroupByOutputType[P]>
            : GetScalarType<T[P], CurriculumGroupByOutputType[P]>
        }
      >
    >


  export type CurriculumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    schools?: boolean | Curriculum$schoolsArgs<ExtArgs>
    subjects?: boolean | Curriculum$subjectsArgs<ExtArgs>
    levels?: boolean | Curriculum$levelsArgs<ExtArgs>
    _count?: boolean | CurriculumCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["curriculum"]>

  export type CurriculumSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type CurriculumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schools?: boolean | Curriculum$schoolsArgs<ExtArgs>
    subjects?: boolean | Curriculum$subjectsArgs<ExtArgs>
    levels?: boolean | Curriculum$levelsArgs<ExtArgs>
    _count?: boolean | CurriculumCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CurriculumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Curriculum"
    objects: {
      schools: Prisma.$SchoolPayload<ExtArgs>[]
      subjects: Prisma.$SubjectPayload<ExtArgs>[]
      levels: Prisma.$AcademicLevelPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
    }, ExtArgs["result"]["curriculum"]>
    composites: {}
  }


  type CurriculumGetPayload<S extends boolean | null | undefined | CurriculumDefaultArgs> = $Result.GetResult<Prisma.$CurriculumPayload, S>

  type CurriculumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CurriculumFindManyArgs, 'select' | 'include'> & {
      select?: CurriculumCountAggregateInputType | true
    }

  export interface CurriculumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Curriculum'], meta: { name: 'Curriculum' } }
    /**
     * Find zero or one Curriculum that matches the filter.
     * @param {CurriculumFindUniqueArgs} args - Arguments to find a Curriculum
     * @example
     * // Get one Curriculum
     * const curriculum = await prisma.curriculum.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CurriculumFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CurriculumFindUniqueArgs<ExtArgs>>
    ): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Curriculum that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CurriculumFindUniqueOrThrowArgs} args - Arguments to find a Curriculum
     * @example
     * // Get one Curriculum
     * const curriculum = await prisma.curriculum.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CurriculumFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CurriculumFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Curriculum that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurriculumFindFirstArgs} args - Arguments to find a Curriculum
     * @example
     * // Get one Curriculum
     * const curriculum = await prisma.curriculum.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CurriculumFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CurriculumFindFirstArgs<ExtArgs>>
    ): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Curriculum that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurriculumFindFirstOrThrowArgs} args - Arguments to find a Curriculum
     * @example
     * // Get one Curriculum
     * const curriculum = await prisma.curriculum.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CurriculumFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CurriculumFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Curricula that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurriculumFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Curricula
     * const curricula = await prisma.curriculum.findMany()
     * 
     * // Get first 10 Curricula
     * const curricula = await prisma.curriculum.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const curriculumWithIdOnly = await prisma.curriculum.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CurriculumFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CurriculumFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Curriculum.
     * @param {CurriculumCreateArgs} args - Arguments to create a Curriculum.
     * @example
     * // Create one Curriculum
     * const Curriculum = await prisma.curriculum.create({
     *   data: {
     *     // ... data to create a Curriculum
     *   }
     * })
     * 
    **/
    create<T extends CurriculumCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CurriculumCreateArgs<ExtArgs>>
    ): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Curricula.
     *     @param {CurriculumCreateManyArgs} args - Arguments to create many Curricula.
     *     @example
     *     // Create many Curricula
     *     const curriculum = await prisma.curriculum.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CurriculumCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CurriculumCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Curriculum.
     * @param {CurriculumDeleteArgs} args - Arguments to delete one Curriculum.
     * @example
     * // Delete one Curriculum
     * const Curriculum = await prisma.curriculum.delete({
     *   where: {
     *     // ... filter to delete one Curriculum
     *   }
     * })
     * 
    **/
    delete<T extends CurriculumDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CurriculumDeleteArgs<ExtArgs>>
    ): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Curriculum.
     * @param {CurriculumUpdateArgs} args - Arguments to update one Curriculum.
     * @example
     * // Update one Curriculum
     * const curriculum = await prisma.curriculum.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CurriculumUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CurriculumUpdateArgs<ExtArgs>>
    ): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Curricula.
     * @param {CurriculumDeleteManyArgs} args - Arguments to filter Curricula to delete.
     * @example
     * // Delete a few Curricula
     * const { count } = await prisma.curriculum.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CurriculumDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CurriculumDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Curricula.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurriculumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Curricula
     * const curriculum = await prisma.curriculum.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CurriculumUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CurriculumUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Curriculum.
     * @param {CurriculumUpsertArgs} args - Arguments to update or create a Curriculum.
     * @example
     * // Update or create a Curriculum
     * const curriculum = await prisma.curriculum.upsert({
     *   create: {
     *     // ... data to create a Curriculum
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Curriculum we want to update
     *   }
     * })
    **/
    upsert<T extends CurriculumUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CurriculumUpsertArgs<ExtArgs>>
    ): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Curricula.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurriculumCountArgs} args - Arguments to filter Curricula to count.
     * @example
     * // Count the number of Curricula
     * const count = await prisma.curriculum.count({
     *   where: {
     *     // ... the filter for the Curricula we want to count
     *   }
     * })
    **/
    count<T extends CurriculumCountArgs>(
      args?: Subset<T, CurriculumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurriculumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Curriculum.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurriculumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurriculumAggregateArgs>(args: Subset<T, CurriculumAggregateArgs>): Prisma.PrismaPromise<GetCurriculumAggregateType<T>>

    /**
     * Group by Curriculum.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurriculumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurriculumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurriculumGroupByArgs['orderBy'] }
        : { orderBy?: CurriculumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurriculumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurriculumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Curriculum model
   */
  readonly fields: CurriculumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Curriculum.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CurriculumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    schools<T extends Curriculum$schoolsArgs<ExtArgs> = {}>(args?: Subset<T, Curriculum$schoolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findMany'> | Null>;

    subjects<T extends Curriculum$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, Curriculum$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    levels<T extends Curriculum$levelsArgs<ExtArgs> = {}>(args?: Subset<T, Curriculum$levelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Curriculum model
   */ 
  interface CurriculumFieldRefs {
    readonly id: FieldRef<"Curriculum", 'Int'>
    readonly name: FieldRef<"Curriculum", 'String'>
    readonly description: FieldRef<"Curriculum", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Curriculum findUnique
   */
  export type CurriculumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    /**
     * Filter, which Curriculum to fetch.
     */
    where: CurriculumWhereUniqueInput
  }


  /**
   * Curriculum findUniqueOrThrow
   */
  export type CurriculumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    /**
     * Filter, which Curriculum to fetch.
     */
    where: CurriculumWhereUniqueInput
  }


  /**
   * Curriculum findFirst
   */
  export type CurriculumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    /**
     * Filter, which Curriculum to fetch.
     */
    where?: CurriculumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curricula to fetch.
     */
    orderBy?: CurriculumOrderByWithRelationInput | CurriculumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Curricula.
     */
    cursor?: CurriculumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curricula from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curricula.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Curricula.
     */
    distinct?: CurriculumScalarFieldEnum | CurriculumScalarFieldEnum[]
  }


  /**
   * Curriculum findFirstOrThrow
   */
  export type CurriculumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    /**
     * Filter, which Curriculum to fetch.
     */
    where?: CurriculumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curricula to fetch.
     */
    orderBy?: CurriculumOrderByWithRelationInput | CurriculumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Curricula.
     */
    cursor?: CurriculumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curricula from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curricula.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Curricula.
     */
    distinct?: CurriculumScalarFieldEnum | CurriculumScalarFieldEnum[]
  }


  /**
   * Curriculum findMany
   */
  export type CurriculumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    /**
     * Filter, which Curricula to fetch.
     */
    where?: CurriculumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curricula to fetch.
     */
    orderBy?: CurriculumOrderByWithRelationInput | CurriculumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Curricula.
     */
    cursor?: CurriculumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curricula from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curricula.
     */
    skip?: number
    distinct?: CurriculumScalarFieldEnum | CurriculumScalarFieldEnum[]
  }


  /**
   * Curriculum create
   */
  export type CurriculumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    /**
     * The data needed to create a Curriculum.
     */
    data: XOR<CurriculumCreateInput, CurriculumUncheckedCreateInput>
  }


  /**
   * Curriculum createMany
   */
  export type CurriculumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Curricula.
     */
    data: CurriculumCreateManyInput | CurriculumCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Curriculum update
   */
  export type CurriculumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    /**
     * The data needed to update a Curriculum.
     */
    data: XOR<CurriculumUpdateInput, CurriculumUncheckedUpdateInput>
    /**
     * Choose, which Curriculum to update.
     */
    where: CurriculumWhereUniqueInput
  }


  /**
   * Curriculum updateMany
   */
  export type CurriculumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Curricula.
     */
    data: XOR<CurriculumUpdateManyMutationInput, CurriculumUncheckedUpdateManyInput>
    /**
     * Filter which Curricula to update
     */
    where?: CurriculumWhereInput
  }


  /**
   * Curriculum upsert
   */
  export type CurriculumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    /**
     * The filter to search for the Curriculum to update in case it exists.
     */
    where: CurriculumWhereUniqueInput
    /**
     * In case the Curriculum found by the `where` argument doesn't exist, create a new Curriculum with this data.
     */
    create: XOR<CurriculumCreateInput, CurriculumUncheckedCreateInput>
    /**
     * In case the Curriculum was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CurriculumUpdateInput, CurriculumUncheckedUpdateInput>
  }


  /**
   * Curriculum delete
   */
  export type CurriculumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    /**
     * Filter which Curriculum to delete.
     */
    where: CurriculumWhereUniqueInput
  }


  /**
   * Curriculum deleteMany
   */
  export type CurriculumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curricula to delete
     */
    where?: CurriculumWhereInput
  }


  /**
   * Curriculum.schools
   */
  export type Curriculum$schoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    cursor?: SchoolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * Curriculum.subjects
   */
  export type Curriculum$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Curriculum.levels
   */
  export type Curriculum$levelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    where?: AcademicLevelWhereInput
    orderBy?: AcademicLevelOrderByWithRelationInput | AcademicLevelOrderByWithRelationInput[]
    cursor?: AcademicLevelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcademicLevelScalarFieldEnum | AcademicLevelScalarFieldEnum[]
  }


  /**
   * Curriculum without action
   */
  export type CurriculumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
  }



  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    id: number | null
    curriculumId: number | null
    academicLevelId: number | null
  }

  export type SubjectSumAggregateOutputType = {
    id: number | null
    curriculumId: number | null
    academicLevelId: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: number | null
    curriculumId: number | null
    subject: string | null
    academicLevelId: number | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: number | null
    curriculumId: number | null
    subject: string | null
    academicLevelId: number | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    curriculumId: number
    subject: number
    academicLevelId: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    id?: true
    curriculumId?: true
    academicLevelId?: true
  }

  export type SubjectSumAggregateInputType = {
    id?: true
    curriculumId?: true
    academicLevelId?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    curriculumId?: true
    subject?: true
    academicLevelId?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    curriculumId?: true
    subject?: true
    academicLevelId?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    curriculumId?: true
    subject?: true
    academicLevelId?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: number
    curriculumId: number | null
    subject: string
    academicLevelId: number | null
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    curriculumId?: boolean
    subject?: boolean
    academicLevelId?: boolean
    curriculum?: boolean | Subject$curriculumArgs<ExtArgs>
    academicLevel?: boolean | Subject$academicLevelArgs<ExtArgs>
    schoolsAttached?: boolean | Subject$schoolsAttachedArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    id?: boolean
    curriculumId?: boolean
    subject?: boolean
    academicLevelId?: boolean
  }

  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    curriculum?: boolean | Subject$curriculumArgs<ExtArgs>
    academicLevel?: boolean | Subject$academicLevelArgs<ExtArgs>
    schoolsAttached?: boolean | Subject$schoolsAttachedArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      curriculum: Prisma.$CurriculumPayload<ExtArgs> | null
      academicLevel: Prisma.$AcademicLevelPayload<ExtArgs> | null
      schoolsAttached: Prisma.$SchoolSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      curriculumId: number | null
      subject: string
      academicLevelId: number | null
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }


  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubjectFindManyArgs, 'select' | 'include'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Subject that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
    **/
    create<T extends SubjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Subjects.
     *     @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     *     @example
     *     // Create many Subjects
     *     const subject = await prisma.subject.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
    **/
    delete<T extends SubjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
    **/
    upsert<T extends SubjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    curriculum<T extends Subject$curriculumArgs<ExtArgs> = {}>(args?: Subset<T, Subject$curriculumArgs<ExtArgs>>): Prisma__CurriculumClient<$Result.GetResult<Prisma.$CurriculumPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    academicLevel<T extends Subject$academicLevelArgs<ExtArgs> = {}>(args?: Subset<T, Subject$academicLevelArgs<ExtArgs>>): Prisma__AcademicLevelClient<$Result.GetResult<Prisma.$AcademicLevelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    schoolsAttached<T extends Subject$schoolsAttachedArgs<ExtArgs> = {}>(args?: Subset<T, Subject$schoolsAttachedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Subject model
   */ 
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'Int'>
    readonly curriculumId: FieldRef<"Subject", 'Int'>
    readonly subject: FieldRef<"Subject", 'String'>
    readonly academicLevelId: FieldRef<"Subject", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }


  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
  }


  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }


  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
  }


  /**
   * Subject.curriculum
   */
  export type Subject$curriculumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curriculum
     */
    select?: CurriculumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CurriculumInclude<ExtArgs> | null
    where?: CurriculumWhereInput
  }


  /**
   * Subject.academicLevel
   */
  export type Subject$academicLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicLevel
     */
    select?: AcademicLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicLevelInclude<ExtArgs> | null
    where?: AcademicLevelWhereInput
  }


  /**
   * Subject.schoolsAttached
   */
  export type Subject$schoolsAttachedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    where?: SchoolSubjectWhereInput
    orderBy?: SchoolSubjectOrderByWithRelationInput | SchoolSubjectOrderByWithRelationInput[]
    cursor?: SchoolSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolSubjectScalarFieldEnum | SchoolSubjectScalarFieldEnum[]
  }


  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
  }



  /**
   * Model SchoolSubject
   */

  export type AggregateSchoolSubject = {
    _count: SchoolSubjectCountAggregateOutputType | null
    _avg: SchoolSubjectAvgAggregateOutputType | null
    _sum: SchoolSubjectSumAggregateOutputType | null
    _min: SchoolSubjectMinAggregateOutputType | null
    _max: SchoolSubjectMaxAggregateOutputType | null
  }

  export type SchoolSubjectAvgAggregateOutputType = {
    id: number | null
    schoolId: number | null
    subjectId: number | null
  }

  export type SchoolSubjectSumAggregateOutputType = {
    id: number | null
    schoolId: number | null
    subjectId: number | null
  }

  export type SchoolSubjectMinAggregateOutputType = {
    id: number | null
    schoolId: number | null
    subjectId: number | null
  }

  export type SchoolSubjectMaxAggregateOutputType = {
    id: number | null
    schoolId: number | null
    subjectId: number | null
  }

  export type SchoolSubjectCountAggregateOutputType = {
    id: number
    schoolId: number
    subjectId: number
    _all: number
  }


  export type SchoolSubjectAvgAggregateInputType = {
    id?: true
    schoolId?: true
    subjectId?: true
  }

  export type SchoolSubjectSumAggregateInputType = {
    id?: true
    schoolId?: true
    subjectId?: true
  }

  export type SchoolSubjectMinAggregateInputType = {
    id?: true
    schoolId?: true
    subjectId?: true
  }

  export type SchoolSubjectMaxAggregateInputType = {
    id?: true
    schoolId?: true
    subjectId?: true
  }

  export type SchoolSubjectCountAggregateInputType = {
    id?: true
    schoolId?: true
    subjectId?: true
    _all?: true
  }

  export type SchoolSubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolSubject to aggregate.
     */
    where?: SchoolSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolSubjects to fetch.
     */
    orderBy?: SchoolSubjectOrderByWithRelationInput | SchoolSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchoolSubjects
    **/
    _count?: true | SchoolSubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolSubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolSubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolSubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolSubjectMaxAggregateInputType
  }

  export type GetSchoolSubjectAggregateType<T extends SchoolSubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSchoolSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchoolSubject[P]>
      : GetScalarType<T[P], AggregateSchoolSubject[P]>
  }




  export type SchoolSubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolSubjectWhereInput
    orderBy?: SchoolSubjectOrderByWithAggregationInput | SchoolSubjectOrderByWithAggregationInput[]
    by: SchoolSubjectScalarFieldEnum[] | SchoolSubjectScalarFieldEnum
    having?: SchoolSubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolSubjectCountAggregateInputType | true
    _avg?: SchoolSubjectAvgAggregateInputType
    _sum?: SchoolSubjectSumAggregateInputType
    _min?: SchoolSubjectMinAggregateInputType
    _max?: SchoolSubjectMaxAggregateInputType
  }

  export type SchoolSubjectGroupByOutputType = {
    id: number
    schoolId: number
    subjectId: number
    _count: SchoolSubjectCountAggregateOutputType | null
    _avg: SchoolSubjectAvgAggregateOutputType | null
    _sum: SchoolSubjectSumAggregateOutputType | null
    _min: SchoolSubjectMinAggregateOutputType | null
    _max: SchoolSubjectMaxAggregateOutputType | null
  }

  type GetSchoolSubjectGroupByPayload<T extends SchoolSubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolSubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolSubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolSubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolSubjectGroupByOutputType[P]>
        }
      >
    >


  export type SchoolSubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    subjectId?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schoolSubject"]>

  export type SchoolSubjectSelectScalar = {
    id?: boolean
    schoolId?: boolean
    subjectId?: boolean
  }

  export type SchoolSubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }


  export type $SchoolSubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SchoolSubject"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      schoolId: number
      subjectId: number
    }, ExtArgs["result"]["schoolSubject"]>
    composites: {}
  }


  type SchoolSubjectGetPayload<S extends boolean | null | undefined | SchoolSubjectDefaultArgs> = $Result.GetResult<Prisma.$SchoolSubjectPayload, S>

  type SchoolSubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolSubjectFindManyArgs, 'select' | 'include'> & {
      select?: SchoolSubjectCountAggregateInputType | true
    }

  export interface SchoolSubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SchoolSubject'], meta: { name: 'SchoolSubject' } }
    /**
     * Find zero or one SchoolSubject that matches the filter.
     * @param {SchoolSubjectFindUniqueArgs} args - Arguments to find a SchoolSubject
     * @example
     * // Get one SchoolSubject
     * const schoolSubject = await prisma.schoolSubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchoolSubjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolSubjectFindUniqueArgs<ExtArgs>>
    ): Prisma__SchoolSubjectClient<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SchoolSubject that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SchoolSubjectFindUniqueOrThrowArgs} args - Arguments to find a SchoolSubject
     * @example
     * // Get one SchoolSubject
     * const schoolSubject = await prisma.schoolSubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SchoolSubjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolSubjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolSubjectClient<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SchoolSubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolSubjectFindFirstArgs} args - Arguments to find a SchoolSubject
     * @example
     * // Get one SchoolSubject
     * const schoolSubject = await prisma.schoolSubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchoolSubjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolSubjectFindFirstArgs<ExtArgs>>
    ): Prisma__SchoolSubjectClient<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SchoolSubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolSubjectFindFirstOrThrowArgs} args - Arguments to find a SchoolSubject
     * @example
     * // Get one SchoolSubject
     * const schoolSubject = await prisma.schoolSubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SchoolSubjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolSubjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolSubjectClient<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SchoolSubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolSubjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchoolSubjects
     * const schoolSubjects = await prisma.schoolSubject.findMany()
     * 
     * // Get first 10 SchoolSubjects
     * const schoolSubjects = await prisma.schoolSubject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolSubjectWithIdOnly = await prisma.schoolSubject.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchoolSubjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolSubjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SchoolSubject.
     * @param {SchoolSubjectCreateArgs} args - Arguments to create a SchoolSubject.
     * @example
     * // Create one SchoolSubject
     * const SchoolSubject = await prisma.schoolSubject.create({
     *   data: {
     *     // ... data to create a SchoolSubject
     *   }
     * })
     * 
    **/
    create<T extends SchoolSubjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolSubjectCreateArgs<ExtArgs>>
    ): Prisma__SchoolSubjectClient<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SchoolSubjects.
     *     @param {SchoolSubjectCreateManyArgs} args - Arguments to create many SchoolSubjects.
     *     @example
     *     // Create many SchoolSubjects
     *     const schoolSubject = await prisma.schoolSubject.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchoolSubjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolSubjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SchoolSubject.
     * @param {SchoolSubjectDeleteArgs} args - Arguments to delete one SchoolSubject.
     * @example
     * // Delete one SchoolSubject
     * const SchoolSubject = await prisma.schoolSubject.delete({
     *   where: {
     *     // ... filter to delete one SchoolSubject
     *   }
     * })
     * 
    **/
    delete<T extends SchoolSubjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolSubjectDeleteArgs<ExtArgs>>
    ): Prisma__SchoolSubjectClient<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SchoolSubject.
     * @param {SchoolSubjectUpdateArgs} args - Arguments to update one SchoolSubject.
     * @example
     * // Update one SchoolSubject
     * const schoolSubject = await prisma.schoolSubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchoolSubjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolSubjectUpdateArgs<ExtArgs>>
    ): Prisma__SchoolSubjectClient<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SchoolSubjects.
     * @param {SchoolSubjectDeleteManyArgs} args - Arguments to filter SchoolSubjects to delete.
     * @example
     * // Delete a few SchoolSubjects
     * const { count } = await prisma.schoolSubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchoolSubjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolSubjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchoolSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolSubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchoolSubjects
     * const schoolSubject = await prisma.schoolSubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchoolSubjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolSubjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SchoolSubject.
     * @param {SchoolSubjectUpsertArgs} args - Arguments to update or create a SchoolSubject.
     * @example
     * // Update or create a SchoolSubject
     * const schoolSubject = await prisma.schoolSubject.upsert({
     *   create: {
     *     // ... data to create a SchoolSubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchoolSubject we want to update
     *   }
     * })
    **/
    upsert<T extends SchoolSubjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolSubjectUpsertArgs<ExtArgs>>
    ): Prisma__SchoolSubjectClient<$Result.GetResult<Prisma.$SchoolSubjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SchoolSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolSubjectCountArgs} args - Arguments to filter SchoolSubjects to count.
     * @example
     * // Count the number of SchoolSubjects
     * const count = await prisma.schoolSubject.count({
     *   where: {
     *     // ... the filter for the SchoolSubjects we want to count
     *   }
     * })
    **/
    count<T extends SchoolSubjectCountArgs>(
      args?: Subset<T, SchoolSubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolSubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchoolSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolSubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolSubjectAggregateArgs>(args: Subset<T, SchoolSubjectAggregateArgs>): Prisma.PrismaPromise<GetSchoolSubjectAggregateType<T>>

    /**
     * Group by SchoolSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolSubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolSubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolSubjectGroupByArgs['orderBy'] }
        : { orderBy?: SchoolSubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolSubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SchoolSubject model
   */
  readonly fields: SchoolSubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SchoolSubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolSubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SchoolSubject model
   */ 
  interface SchoolSubjectFieldRefs {
    readonly id: FieldRef<"SchoolSubject", 'Int'>
    readonly schoolId: FieldRef<"SchoolSubject", 'Int'>
    readonly subjectId: FieldRef<"SchoolSubject", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * SchoolSubject findUnique
   */
  export type SchoolSubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    /**
     * Filter, which SchoolSubject to fetch.
     */
    where: SchoolSubjectWhereUniqueInput
  }


  /**
   * SchoolSubject findUniqueOrThrow
   */
  export type SchoolSubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    /**
     * Filter, which SchoolSubject to fetch.
     */
    where: SchoolSubjectWhereUniqueInput
  }


  /**
   * SchoolSubject findFirst
   */
  export type SchoolSubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    /**
     * Filter, which SchoolSubject to fetch.
     */
    where?: SchoolSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolSubjects to fetch.
     */
    orderBy?: SchoolSubjectOrderByWithRelationInput | SchoolSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolSubjects.
     */
    cursor?: SchoolSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolSubjects.
     */
    distinct?: SchoolSubjectScalarFieldEnum | SchoolSubjectScalarFieldEnum[]
  }


  /**
   * SchoolSubject findFirstOrThrow
   */
  export type SchoolSubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    /**
     * Filter, which SchoolSubject to fetch.
     */
    where?: SchoolSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolSubjects to fetch.
     */
    orderBy?: SchoolSubjectOrderByWithRelationInput | SchoolSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolSubjects.
     */
    cursor?: SchoolSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolSubjects.
     */
    distinct?: SchoolSubjectScalarFieldEnum | SchoolSubjectScalarFieldEnum[]
  }


  /**
   * SchoolSubject findMany
   */
  export type SchoolSubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    /**
     * Filter, which SchoolSubjects to fetch.
     */
    where?: SchoolSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolSubjects to fetch.
     */
    orderBy?: SchoolSubjectOrderByWithRelationInput | SchoolSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchoolSubjects.
     */
    cursor?: SchoolSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolSubjects.
     */
    skip?: number
    distinct?: SchoolSubjectScalarFieldEnum | SchoolSubjectScalarFieldEnum[]
  }


  /**
   * SchoolSubject create
   */
  export type SchoolSubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a SchoolSubject.
     */
    data: XOR<SchoolSubjectCreateInput, SchoolSubjectUncheckedCreateInput>
  }


  /**
   * SchoolSubject createMany
   */
  export type SchoolSubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SchoolSubjects.
     */
    data: SchoolSubjectCreateManyInput | SchoolSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SchoolSubject update
   */
  export type SchoolSubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a SchoolSubject.
     */
    data: XOR<SchoolSubjectUpdateInput, SchoolSubjectUncheckedUpdateInput>
    /**
     * Choose, which SchoolSubject to update.
     */
    where: SchoolSubjectWhereUniqueInput
  }


  /**
   * SchoolSubject updateMany
   */
  export type SchoolSubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SchoolSubjects.
     */
    data: XOR<SchoolSubjectUpdateManyMutationInput, SchoolSubjectUncheckedUpdateManyInput>
    /**
     * Filter which SchoolSubjects to update
     */
    where?: SchoolSubjectWhereInput
  }


  /**
   * SchoolSubject upsert
   */
  export type SchoolSubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the SchoolSubject to update in case it exists.
     */
    where: SchoolSubjectWhereUniqueInput
    /**
     * In case the SchoolSubject found by the `where` argument doesn't exist, create a new SchoolSubject with this data.
     */
    create: XOR<SchoolSubjectCreateInput, SchoolSubjectUncheckedCreateInput>
    /**
     * In case the SchoolSubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolSubjectUpdateInput, SchoolSubjectUncheckedUpdateInput>
  }


  /**
   * SchoolSubject delete
   */
  export type SchoolSubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
    /**
     * Filter which SchoolSubject to delete.
     */
    where: SchoolSubjectWhereUniqueInput
  }


  /**
   * SchoolSubject deleteMany
   */
  export type SchoolSubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolSubjects to delete
     */
    where?: SchoolSubjectWhereInput
  }


  /**
   * SchoolSubject without action
   */
  export type SchoolSubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolSubject
     */
    select?: SchoolSubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolSubjectInclude<ExtArgs> | null
  }



  /**
   * Model District
   */

  export type AggregateDistrict = {
    _count: DistrictCountAggregateOutputType | null
    _avg: DistrictAvgAggregateOutputType | null
    _sum: DistrictSumAggregateOutputType | null
    _min: DistrictMinAggregateOutputType | null
    _max: DistrictMaxAggregateOutputType | null
  }

  export type DistrictAvgAggregateOutputType = {
    id: number | null
  }

  export type DistrictSumAggregateOutputType = {
    id: number | null
  }

  export type DistrictMinAggregateOutputType = {
    id: number | null
    name: string | null
    region: string | null
  }

  export type DistrictMaxAggregateOutputType = {
    id: number | null
    name: string | null
    region: string | null
  }

  export type DistrictCountAggregateOutputType = {
    id: number
    name: number
    region: number
    _all: number
  }


  export type DistrictAvgAggregateInputType = {
    id?: true
  }

  export type DistrictSumAggregateInputType = {
    id?: true
  }

  export type DistrictMinAggregateInputType = {
    id?: true
    name?: true
    region?: true
  }

  export type DistrictMaxAggregateInputType = {
    id?: true
    name?: true
    region?: true
  }

  export type DistrictCountAggregateInputType = {
    id?: true
    name?: true
    region?: true
    _all?: true
  }

  export type DistrictAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which District to aggregate.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Districts
    **/
    _count?: true | DistrictCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DistrictAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DistrictSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistrictMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistrictMaxAggregateInputType
  }

  export type GetDistrictAggregateType<T extends DistrictAggregateArgs> = {
        [P in keyof T & keyof AggregateDistrict]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistrict[P]>
      : GetScalarType<T[P], AggregateDistrict[P]>
  }




  export type DistrictGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistrictWhereInput
    orderBy?: DistrictOrderByWithAggregationInput | DistrictOrderByWithAggregationInput[]
    by: DistrictScalarFieldEnum[] | DistrictScalarFieldEnum
    having?: DistrictScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistrictCountAggregateInputType | true
    _avg?: DistrictAvgAggregateInputType
    _sum?: DistrictSumAggregateInputType
    _min?: DistrictMinAggregateInputType
    _max?: DistrictMaxAggregateInputType
  }

  export type DistrictGroupByOutputType = {
    id: number
    name: string
    region: string | null
    _count: DistrictCountAggregateOutputType | null
    _avg: DistrictAvgAggregateOutputType | null
    _sum: DistrictSumAggregateOutputType | null
    _min: DistrictMinAggregateOutputType | null
    _max: DistrictMaxAggregateOutputType | null
  }

  type GetDistrictGroupByPayload<T extends DistrictGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DistrictGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistrictGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistrictGroupByOutputType[P]>
            : GetScalarType<T[P], DistrictGroupByOutputType[P]>
        }
      >
    >


  export type DistrictSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    region?: boolean
    schools?: boolean | District$schoolsArgs<ExtArgs>
    _count?: boolean | DistrictCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["district"]>

  export type DistrictSelectScalar = {
    id?: boolean
    name?: boolean
    region?: boolean
  }

  export type DistrictInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schools?: boolean | District$schoolsArgs<ExtArgs>
    _count?: boolean | DistrictCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DistrictPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "District"
    objects: {
      schools: Prisma.$SchoolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      region: string | null
    }, ExtArgs["result"]["district"]>
    composites: {}
  }


  type DistrictGetPayload<S extends boolean | null | undefined | DistrictDefaultArgs> = $Result.GetResult<Prisma.$DistrictPayload, S>

  type DistrictCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DistrictFindManyArgs, 'select' | 'include'> & {
      select?: DistrictCountAggregateInputType | true
    }

  export interface DistrictDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['District'], meta: { name: 'District' } }
    /**
     * Find zero or one District that matches the filter.
     * @param {DistrictFindUniqueArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DistrictFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DistrictFindUniqueArgs<ExtArgs>>
    ): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one District that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DistrictFindUniqueOrThrowArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DistrictFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DistrictFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first District that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictFindFirstArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DistrictFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DistrictFindFirstArgs<ExtArgs>>
    ): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first District that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictFindFirstOrThrowArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DistrictFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DistrictFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Districts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Districts
     * const districts = await prisma.district.findMany()
     * 
     * // Get first 10 Districts
     * const districts = await prisma.district.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const districtWithIdOnly = await prisma.district.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DistrictFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DistrictFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a District.
     * @param {DistrictCreateArgs} args - Arguments to create a District.
     * @example
     * // Create one District
     * const District = await prisma.district.create({
     *   data: {
     *     // ... data to create a District
     *   }
     * })
     * 
    **/
    create<T extends DistrictCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DistrictCreateArgs<ExtArgs>>
    ): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Districts.
     *     @param {DistrictCreateManyArgs} args - Arguments to create many Districts.
     *     @example
     *     // Create many Districts
     *     const district = await prisma.district.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DistrictCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DistrictCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a District.
     * @param {DistrictDeleteArgs} args - Arguments to delete one District.
     * @example
     * // Delete one District
     * const District = await prisma.district.delete({
     *   where: {
     *     // ... filter to delete one District
     *   }
     * })
     * 
    **/
    delete<T extends DistrictDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DistrictDeleteArgs<ExtArgs>>
    ): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one District.
     * @param {DistrictUpdateArgs} args - Arguments to update one District.
     * @example
     * // Update one District
     * const district = await prisma.district.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DistrictUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DistrictUpdateArgs<ExtArgs>>
    ): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Districts.
     * @param {DistrictDeleteManyArgs} args - Arguments to filter Districts to delete.
     * @example
     * // Delete a few Districts
     * const { count } = await prisma.district.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DistrictDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DistrictDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Districts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Districts
     * const district = await prisma.district.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DistrictUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DistrictUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one District.
     * @param {DistrictUpsertArgs} args - Arguments to update or create a District.
     * @example
     * // Update or create a District
     * const district = await prisma.district.upsert({
     *   create: {
     *     // ... data to create a District
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the District we want to update
     *   }
     * })
    **/
    upsert<T extends DistrictUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DistrictUpsertArgs<ExtArgs>>
    ): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Districts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictCountArgs} args - Arguments to filter Districts to count.
     * @example
     * // Count the number of Districts
     * const count = await prisma.district.count({
     *   where: {
     *     // ... the filter for the Districts we want to count
     *   }
     * })
    **/
    count<T extends DistrictCountArgs>(
      args?: Subset<T, DistrictCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistrictCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a District.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistrictAggregateArgs>(args: Subset<T, DistrictAggregateArgs>): Prisma.PrismaPromise<GetDistrictAggregateType<T>>

    /**
     * Group by District.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistrictGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistrictGroupByArgs['orderBy'] }
        : { orderBy?: DistrictGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistrictGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistrictGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the District model
   */
  readonly fields: DistrictFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for District.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DistrictClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    schools<T extends District$schoolsArgs<ExtArgs> = {}>(args?: Subset<T, District$schoolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the District model
   */ 
  interface DistrictFieldRefs {
    readonly id: FieldRef<"District", 'Int'>
    readonly name: FieldRef<"District", 'String'>
    readonly region: FieldRef<"District", 'String'>
  }
    

  // Custom InputTypes

  /**
   * District findUnique
   */
  export type DistrictFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where: DistrictWhereUniqueInput
  }


  /**
   * District findUniqueOrThrow
   */
  export type DistrictFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where: DistrictWhereUniqueInput
  }


  /**
   * District findFirst
   */
  export type DistrictFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Districts.
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Districts.
     */
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }


  /**
   * District findFirstOrThrow
   */
  export type DistrictFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Districts.
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Districts.
     */
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }


  /**
   * District findMany
   */
  export type DistrictFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which Districts to fetch.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Districts.
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }


  /**
   * District create
   */
  export type DistrictCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * The data needed to create a District.
     */
    data: XOR<DistrictCreateInput, DistrictUncheckedCreateInput>
  }


  /**
   * District createMany
   */
  export type DistrictCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Districts.
     */
    data: DistrictCreateManyInput | DistrictCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * District update
   */
  export type DistrictUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * The data needed to update a District.
     */
    data: XOR<DistrictUpdateInput, DistrictUncheckedUpdateInput>
    /**
     * Choose, which District to update.
     */
    where: DistrictWhereUniqueInput
  }


  /**
   * District updateMany
   */
  export type DistrictUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Districts.
     */
    data: XOR<DistrictUpdateManyMutationInput, DistrictUncheckedUpdateManyInput>
    /**
     * Filter which Districts to update
     */
    where?: DistrictWhereInput
  }


  /**
   * District upsert
   */
  export type DistrictUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * The filter to search for the District to update in case it exists.
     */
    where: DistrictWhereUniqueInput
    /**
     * In case the District found by the `where` argument doesn't exist, create a new District with this data.
     */
    create: XOR<DistrictCreateInput, DistrictUncheckedCreateInput>
    /**
     * In case the District was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DistrictUpdateInput, DistrictUncheckedUpdateInput>
  }


  /**
   * District delete
   */
  export type DistrictDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter which District to delete.
     */
    where: DistrictWhereUniqueInput
  }


  /**
   * District deleteMany
   */
  export type DistrictDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Districts to delete
     */
    where?: DistrictWhereInput
  }


  /**
   * District.schools
   */
  export type District$schoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    cursor?: SchoolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * District without action
   */
  export type DistrictDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistrictInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SchoolScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    districtId: 'districtId',
    about: 'about',
    history: 'history',
    phoneNumber: 'phoneNumber',
    email: 'email',
    curriculumId: 'curriculumId',
    academicLevelId: 'academicLevelId',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt'
  };

  export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


  export const SchoolReviewScalarFieldEnum: {
    id: 'id',
    title: 'title',
    review: 'review',
    rating: 'rating',
    userId: 'userId',
    schoolId: 'schoolId',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt'
  };

  export type SchoolReviewScalarFieldEnum = (typeof SchoolReviewScalarFieldEnum)[keyof typeof SchoolReviewScalarFieldEnum]


  export const SchoolPhotoScalarFieldEnum: {
    id: 'id',
    path: 'path',
    type: 'type',
    schoolId: 'schoolId',
    createdAt: 'createdAt'
  };

  export type SchoolPhotoScalarFieldEnum = (typeof SchoolPhotoScalarFieldEnum)[keyof typeof SchoolPhotoScalarFieldEnum]


  export const AcademicLevelScalarFieldEnum: {
    id: 'id',
    level: 'level',
    curriculumId: 'curriculumId'
  };

  export type AcademicLevelScalarFieldEnum = (typeof AcademicLevelScalarFieldEnum)[keyof typeof AcademicLevelScalarFieldEnum]


  export const CurriculumScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type CurriculumScalarFieldEnum = (typeof CurriculumScalarFieldEnum)[keyof typeof CurriculumScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    curriculumId: 'curriculumId',
    subject: 'subject',
    academicLevelId: 'academicLevelId'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const SchoolSubjectScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    subjectId: 'subjectId'
  };

  export type SchoolSubjectScalarFieldEnum = (typeof SchoolSubjectScalarFieldEnum)[keyof typeof SchoolSubjectScalarFieldEnum]


  export const DistrictScalarFieldEnum: {
    id: 'id',
    name: 'name',
    region: 'region'
  };

  export type DistrictScalarFieldEnum = (typeof DistrictScalarFieldEnum)[keyof typeof DistrictScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PhotoType'
   */
  export type EnumPhotoTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhotoType'>
    


  /**
   * Reference to a field of type 'PhotoType[]'
   */
  export type ListEnumPhotoTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhotoType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    schoolReviews?: SchoolReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    schoolReviews?: SchoolReviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    schoolReviews?: SchoolReviewListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type SchoolWhereInput = {
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    id?: IntFilter<"School"> | number
    name?: StringFilter<"School"> | string
    address?: StringNullableFilter<"School"> | string | null
    districtId?: IntFilter<"School"> | number
    about?: StringNullableFilter<"School"> | string | null
    history?: StringNullableFilter<"School"> | string | null
    phoneNumber?: StringNullableFilter<"School"> | string | null
    email?: StringNullableFilter<"School"> | string | null
    curriculumId?: IntNullableFilter<"School"> | number | null
    academicLevelId?: IntNullableFilter<"School"> | number | null
    createdAt?: DateTimeFilter<"School"> | Date | string
    deletedAt?: DateTimeNullableFilter<"School"> | Date | string | null
    district?: XOR<DistrictRelationFilter, DistrictWhereInput>
    curriculum?: XOR<CurriculumNullableRelationFilter, CurriculumWhereInput> | null
    academicLevel?: XOR<AcademicLevelNullableRelationFilter, AcademicLevelWhereInput> | null
    photos?: SchoolPhotoListRelationFilter
    reviews?: SchoolReviewListRelationFilter
    subjects?: SchoolSubjectListRelationFilter
  }

  export type SchoolOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    districtId?: SortOrder
    about?: SortOrderInput | SortOrder
    history?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    curriculumId?: SortOrderInput | SortOrder
    academicLevelId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    district?: DistrictOrderByWithRelationInput
    curriculum?: CurriculumOrderByWithRelationInput
    academicLevel?: AcademicLevelOrderByWithRelationInput
    photos?: SchoolPhotoOrderByRelationAggregateInput
    reviews?: SchoolReviewOrderByRelationAggregateInput
    subjects?: SchoolSubjectOrderByRelationAggregateInput
  }

  export type SchoolWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    name?: StringFilter<"School"> | string
    address?: StringNullableFilter<"School"> | string | null
    districtId?: IntFilter<"School"> | number
    about?: StringNullableFilter<"School"> | string | null
    history?: StringNullableFilter<"School"> | string | null
    phoneNumber?: StringNullableFilter<"School"> | string | null
    curriculumId?: IntNullableFilter<"School"> | number | null
    academicLevelId?: IntNullableFilter<"School"> | number | null
    createdAt?: DateTimeFilter<"School"> | Date | string
    deletedAt?: DateTimeNullableFilter<"School"> | Date | string | null
    district?: XOR<DistrictRelationFilter, DistrictWhereInput>
    curriculum?: XOR<CurriculumNullableRelationFilter, CurriculumWhereInput> | null
    academicLevel?: XOR<AcademicLevelNullableRelationFilter, AcademicLevelWhereInput> | null
    photos?: SchoolPhotoListRelationFilter
    reviews?: SchoolReviewListRelationFilter
    subjects?: SchoolSubjectListRelationFilter
  }, "id" | "email">

  export type SchoolOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    districtId?: SortOrder
    about?: SortOrderInput | SortOrder
    history?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    curriculumId?: SortOrderInput | SortOrder
    academicLevelId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: SchoolCountOrderByAggregateInput
    _avg?: SchoolAvgOrderByAggregateInput
    _max?: SchoolMaxOrderByAggregateInput
    _min?: SchoolMinOrderByAggregateInput
    _sum?: SchoolSumOrderByAggregateInput
  }

  export type SchoolScalarWhereWithAggregatesInput = {
    AND?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    OR?: SchoolScalarWhereWithAggregatesInput[]
    NOT?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"School"> | number
    name?: StringWithAggregatesFilter<"School"> | string
    address?: StringNullableWithAggregatesFilter<"School"> | string | null
    districtId?: IntWithAggregatesFilter<"School"> | number
    about?: StringNullableWithAggregatesFilter<"School"> | string | null
    history?: StringNullableWithAggregatesFilter<"School"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"School"> | string | null
    email?: StringNullableWithAggregatesFilter<"School"> | string | null
    curriculumId?: IntNullableWithAggregatesFilter<"School"> | number | null
    academicLevelId?: IntNullableWithAggregatesFilter<"School"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"School"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"School"> | Date | string | null
  }

  export type SchoolReviewWhereInput = {
    AND?: SchoolReviewWhereInput | SchoolReviewWhereInput[]
    OR?: SchoolReviewWhereInput[]
    NOT?: SchoolReviewWhereInput | SchoolReviewWhereInput[]
    id?: IntFilter<"SchoolReview"> | number
    title?: StringFilter<"SchoolReview"> | string
    review?: StringFilter<"SchoolReview"> | string
    rating?: IntFilter<"SchoolReview"> | number
    userId?: IntNullableFilter<"SchoolReview"> | number | null
    schoolId?: IntFilter<"SchoolReview"> | number
    createdAt?: DateTimeFilter<"SchoolReview"> | Date | string
    deletedAt?: DateTimeNullableFilter<"SchoolReview"> | Date | string | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }

  export type SchoolReviewOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    review?: SortOrder
    rating?: SortOrder
    userId?: SortOrderInput | SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    school?: SchoolOrderByWithRelationInput
  }

  export type SchoolReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SchoolReviewWhereInput | SchoolReviewWhereInput[]
    OR?: SchoolReviewWhereInput[]
    NOT?: SchoolReviewWhereInput | SchoolReviewWhereInput[]
    title?: StringFilter<"SchoolReview"> | string
    review?: StringFilter<"SchoolReview"> | string
    rating?: IntFilter<"SchoolReview"> | number
    userId?: IntNullableFilter<"SchoolReview"> | number | null
    schoolId?: IntFilter<"SchoolReview"> | number
    createdAt?: DateTimeFilter<"SchoolReview"> | Date | string
    deletedAt?: DateTimeNullableFilter<"SchoolReview"> | Date | string | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }, "id">

  export type SchoolReviewOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    review?: SortOrder
    rating?: SortOrder
    userId?: SortOrderInput | SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: SchoolReviewCountOrderByAggregateInput
    _avg?: SchoolReviewAvgOrderByAggregateInput
    _max?: SchoolReviewMaxOrderByAggregateInput
    _min?: SchoolReviewMinOrderByAggregateInput
    _sum?: SchoolReviewSumOrderByAggregateInput
  }

  export type SchoolReviewScalarWhereWithAggregatesInput = {
    AND?: SchoolReviewScalarWhereWithAggregatesInput | SchoolReviewScalarWhereWithAggregatesInput[]
    OR?: SchoolReviewScalarWhereWithAggregatesInput[]
    NOT?: SchoolReviewScalarWhereWithAggregatesInput | SchoolReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SchoolReview"> | number
    title?: StringWithAggregatesFilter<"SchoolReview"> | string
    review?: StringWithAggregatesFilter<"SchoolReview"> | string
    rating?: IntWithAggregatesFilter<"SchoolReview"> | number
    userId?: IntNullableWithAggregatesFilter<"SchoolReview"> | number | null
    schoolId?: IntWithAggregatesFilter<"SchoolReview"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SchoolReview"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"SchoolReview"> | Date | string | null
  }

  export type SchoolPhotoWhereInput = {
    AND?: SchoolPhotoWhereInput | SchoolPhotoWhereInput[]
    OR?: SchoolPhotoWhereInput[]
    NOT?: SchoolPhotoWhereInput | SchoolPhotoWhereInput[]
    id?: IntFilter<"SchoolPhoto"> | number
    path?: StringFilter<"SchoolPhoto"> | string
    type?: EnumPhotoTypeFilter<"SchoolPhoto"> | $Enums.PhotoType
    schoolId?: IntNullableFilter<"SchoolPhoto"> | number | null
    createdAt?: DateTimeFilter<"SchoolPhoto"> | Date | string
    school?: XOR<SchoolNullableRelationFilter, SchoolWhereInput> | null
  }

  export type SchoolPhotoOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    type?: SortOrder
    schoolId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
  }

  export type SchoolPhotoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SchoolPhotoWhereInput | SchoolPhotoWhereInput[]
    OR?: SchoolPhotoWhereInput[]
    NOT?: SchoolPhotoWhereInput | SchoolPhotoWhereInput[]
    path?: StringFilter<"SchoolPhoto"> | string
    type?: EnumPhotoTypeFilter<"SchoolPhoto"> | $Enums.PhotoType
    schoolId?: IntNullableFilter<"SchoolPhoto"> | number | null
    createdAt?: DateTimeFilter<"SchoolPhoto"> | Date | string
    school?: XOR<SchoolNullableRelationFilter, SchoolWhereInput> | null
  }, "id">

  export type SchoolPhotoOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    type?: SortOrder
    schoolId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SchoolPhotoCountOrderByAggregateInput
    _avg?: SchoolPhotoAvgOrderByAggregateInput
    _max?: SchoolPhotoMaxOrderByAggregateInput
    _min?: SchoolPhotoMinOrderByAggregateInput
    _sum?: SchoolPhotoSumOrderByAggregateInput
  }

  export type SchoolPhotoScalarWhereWithAggregatesInput = {
    AND?: SchoolPhotoScalarWhereWithAggregatesInput | SchoolPhotoScalarWhereWithAggregatesInput[]
    OR?: SchoolPhotoScalarWhereWithAggregatesInput[]
    NOT?: SchoolPhotoScalarWhereWithAggregatesInput | SchoolPhotoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SchoolPhoto"> | number
    path?: StringWithAggregatesFilter<"SchoolPhoto"> | string
    type?: EnumPhotoTypeWithAggregatesFilter<"SchoolPhoto"> | $Enums.PhotoType
    schoolId?: IntNullableWithAggregatesFilter<"SchoolPhoto"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"SchoolPhoto"> | Date | string
  }

  export type AcademicLevelWhereInput = {
    AND?: AcademicLevelWhereInput | AcademicLevelWhereInput[]
    OR?: AcademicLevelWhereInput[]
    NOT?: AcademicLevelWhereInput | AcademicLevelWhereInput[]
    id?: IntFilter<"AcademicLevel"> | number
    level?: StringFilter<"AcademicLevel"> | string
    curriculumId?: IntNullableFilter<"AcademicLevel"> | number | null
    schools?: SchoolListRelationFilter
    subjects?: SubjectListRelationFilter
    curriculum?: XOR<CurriculumNullableRelationFilter, CurriculumWhereInput> | null
  }

  export type AcademicLevelOrderByWithRelationInput = {
    id?: SortOrder
    level?: SortOrder
    curriculumId?: SortOrderInput | SortOrder
    schools?: SchoolOrderByRelationAggregateInput
    subjects?: SubjectOrderByRelationAggregateInput
    curriculum?: CurriculumOrderByWithRelationInput
  }

  export type AcademicLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AcademicLevelWhereInput | AcademicLevelWhereInput[]
    OR?: AcademicLevelWhereInput[]
    NOT?: AcademicLevelWhereInput | AcademicLevelWhereInput[]
    level?: StringFilter<"AcademicLevel"> | string
    curriculumId?: IntNullableFilter<"AcademicLevel"> | number | null
    schools?: SchoolListRelationFilter
    subjects?: SubjectListRelationFilter
    curriculum?: XOR<CurriculumNullableRelationFilter, CurriculumWhereInput> | null
  }, "id">

  export type AcademicLevelOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    curriculumId?: SortOrderInput | SortOrder
    _count?: AcademicLevelCountOrderByAggregateInput
    _avg?: AcademicLevelAvgOrderByAggregateInput
    _max?: AcademicLevelMaxOrderByAggregateInput
    _min?: AcademicLevelMinOrderByAggregateInput
    _sum?: AcademicLevelSumOrderByAggregateInput
  }

  export type AcademicLevelScalarWhereWithAggregatesInput = {
    AND?: AcademicLevelScalarWhereWithAggregatesInput | AcademicLevelScalarWhereWithAggregatesInput[]
    OR?: AcademicLevelScalarWhereWithAggregatesInput[]
    NOT?: AcademicLevelScalarWhereWithAggregatesInput | AcademicLevelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AcademicLevel"> | number
    level?: StringWithAggregatesFilter<"AcademicLevel"> | string
    curriculumId?: IntNullableWithAggregatesFilter<"AcademicLevel"> | number | null
  }

  export type CurriculumWhereInput = {
    AND?: CurriculumWhereInput | CurriculumWhereInput[]
    OR?: CurriculumWhereInput[]
    NOT?: CurriculumWhereInput | CurriculumWhereInput[]
    id?: IntFilter<"Curriculum"> | number
    name?: StringFilter<"Curriculum"> | string
    description?: StringNullableFilter<"Curriculum"> | string | null
    schools?: SchoolListRelationFilter
    subjects?: SubjectListRelationFilter
    levels?: AcademicLevelListRelationFilter
  }

  export type CurriculumOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    schools?: SchoolOrderByRelationAggregateInput
    subjects?: SubjectOrderByRelationAggregateInput
    levels?: AcademicLevelOrderByRelationAggregateInput
  }

  export type CurriculumWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CurriculumWhereInput | CurriculumWhereInput[]
    OR?: CurriculumWhereInput[]
    NOT?: CurriculumWhereInput | CurriculumWhereInput[]
    name?: StringFilter<"Curriculum"> | string
    description?: StringNullableFilter<"Curriculum"> | string | null
    schools?: SchoolListRelationFilter
    subjects?: SubjectListRelationFilter
    levels?: AcademicLevelListRelationFilter
  }, "id">

  export type CurriculumOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: CurriculumCountOrderByAggregateInput
    _avg?: CurriculumAvgOrderByAggregateInput
    _max?: CurriculumMaxOrderByAggregateInput
    _min?: CurriculumMinOrderByAggregateInput
    _sum?: CurriculumSumOrderByAggregateInput
  }

  export type CurriculumScalarWhereWithAggregatesInput = {
    AND?: CurriculumScalarWhereWithAggregatesInput | CurriculumScalarWhereWithAggregatesInput[]
    OR?: CurriculumScalarWhereWithAggregatesInput[]
    NOT?: CurriculumScalarWhereWithAggregatesInput | CurriculumScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Curriculum"> | number
    name?: StringWithAggregatesFilter<"Curriculum"> | string
    description?: StringNullableWithAggregatesFilter<"Curriculum"> | string | null
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: IntFilter<"Subject"> | number
    curriculumId?: IntNullableFilter<"Subject"> | number | null
    subject?: StringFilter<"Subject"> | string
    academicLevelId?: IntNullableFilter<"Subject"> | number | null
    curriculum?: XOR<CurriculumNullableRelationFilter, CurriculumWhereInput> | null
    academicLevel?: XOR<AcademicLevelNullableRelationFilter, AcademicLevelWhereInput> | null
    schoolsAttached?: SchoolSubjectListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    curriculumId?: SortOrderInput | SortOrder
    subject?: SortOrder
    academicLevelId?: SortOrderInput | SortOrder
    curriculum?: CurriculumOrderByWithRelationInput
    academicLevel?: AcademicLevelOrderByWithRelationInput
    schoolsAttached?: SchoolSubjectOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    curriculumId?: IntNullableFilter<"Subject"> | number | null
    subject?: StringFilter<"Subject"> | string
    academicLevelId?: IntNullableFilter<"Subject"> | number | null
    curriculum?: XOR<CurriculumNullableRelationFilter, CurriculumWhereInput> | null
    academicLevel?: XOR<AcademicLevelNullableRelationFilter, AcademicLevelWhereInput> | null
    schoolsAttached?: SchoolSubjectListRelationFilter
  }, "id">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    curriculumId?: SortOrderInput | SortOrder
    subject?: SortOrder
    academicLevelId?: SortOrderInput | SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subject"> | number
    curriculumId?: IntNullableWithAggregatesFilter<"Subject"> | number | null
    subject?: StringWithAggregatesFilter<"Subject"> | string
    academicLevelId?: IntNullableWithAggregatesFilter<"Subject"> | number | null
  }

  export type SchoolSubjectWhereInput = {
    AND?: SchoolSubjectWhereInput | SchoolSubjectWhereInput[]
    OR?: SchoolSubjectWhereInput[]
    NOT?: SchoolSubjectWhereInput | SchoolSubjectWhereInput[]
    id?: IntFilter<"SchoolSubject"> | number
    schoolId?: IntFilter<"SchoolSubject"> | number
    subjectId?: IntFilter<"SchoolSubject"> | number
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
  }

  export type SchoolSubjectOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    subjectId?: SortOrder
    school?: SchoolOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
  }

  export type SchoolSubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SchoolSubjectWhereInput | SchoolSubjectWhereInput[]
    OR?: SchoolSubjectWhereInput[]
    NOT?: SchoolSubjectWhereInput | SchoolSubjectWhereInput[]
    schoolId?: IntFilter<"SchoolSubject"> | number
    subjectId?: IntFilter<"SchoolSubject"> | number
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
  }, "id">

  export type SchoolSubjectOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    subjectId?: SortOrder
    _count?: SchoolSubjectCountOrderByAggregateInput
    _avg?: SchoolSubjectAvgOrderByAggregateInput
    _max?: SchoolSubjectMaxOrderByAggregateInput
    _min?: SchoolSubjectMinOrderByAggregateInput
    _sum?: SchoolSubjectSumOrderByAggregateInput
  }

  export type SchoolSubjectScalarWhereWithAggregatesInput = {
    AND?: SchoolSubjectScalarWhereWithAggregatesInput | SchoolSubjectScalarWhereWithAggregatesInput[]
    OR?: SchoolSubjectScalarWhereWithAggregatesInput[]
    NOT?: SchoolSubjectScalarWhereWithAggregatesInput | SchoolSubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SchoolSubject"> | number
    schoolId?: IntWithAggregatesFilter<"SchoolSubject"> | number
    subjectId?: IntWithAggregatesFilter<"SchoolSubject"> | number
  }

  export type DistrictWhereInput = {
    AND?: DistrictWhereInput | DistrictWhereInput[]
    OR?: DistrictWhereInput[]
    NOT?: DistrictWhereInput | DistrictWhereInput[]
    id?: IntFilter<"District"> | number
    name?: StringFilter<"District"> | string
    region?: StringNullableFilter<"District"> | string | null
    schools?: SchoolListRelationFilter
  }

  export type DistrictOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrderInput | SortOrder
    schools?: SchoolOrderByRelationAggregateInput
  }

  export type DistrictWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DistrictWhereInput | DistrictWhereInput[]
    OR?: DistrictWhereInput[]
    NOT?: DistrictWhereInput | DistrictWhereInput[]
    name?: StringFilter<"District"> | string
    region?: StringNullableFilter<"District"> | string | null
    schools?: SchoolListRelationFilter
  }, "id">

  export type DistrictOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrderInput | SortOrder
    _count?: DistrictCountOrderByAggregateInput
    _avg?: DistrictAvgOrderByAggregateInput
    _max?: DistrictMaxOrderByAggregateInput
    _min?: DistrictMinOrderByAggregateInput
    _sum?: DistrictSumOrderByAggregateInput
  }

  export type DistrictScalarWhereWithAggregatesInput = {
    AND?: DistrictScalarWhereWithAggregatesInput | DistrictScalarWhereWithAggregatesInput[]
    OR?: DistrictScalarWhereWithAggregatesInput[]
    NOT?: DistrictScalarWhereWithAggregatesInput | DistrictScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"District"> | number
    name?: StringWithAggregatesFilter<"District"> | string
    region?: StringNullableWithAggregatesFilter<"District"> | string | null
  }

  export type UserCreateInput = {
    email: string
    name?: string | null
    schoolReviews?: SchoolReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name?: string | null
    schoolReviews?: SchoolReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    schoolReviews?: SchoolReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    schoolReviews?: SchoolReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchoolCreateInput = {
    name: string
    address?: string | null
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    district: DistrictCreateNestedOneWithoutSchoolsInput
    curriculum?: CurriculumCreateNestedOneWithoutSchoolsInput
    academicLevel?: AcademicLevelCreateNestedOneWithoutSchoolsInput
    photos?: SchoolPhotoCreateNestedManyWithoutSchoolInput
    reviews?: SchoolReviewCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateInput = {
    id?: number
    name: string
    address?: string | null
    districtId: number
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    curriculumId?: number | null
    academicLevelId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    photos?: SchoolPhotoUncheckedCreateNestedManyWithoutSchoolInput
    reviews?: SchoolReviewUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    district?: DistrictUpdateOneRequiredWithoutSchoolsNestedInput
    curriculum?: CurriculumUpdateOneWithoutSchoolsNestedInput
    academicLevel?: AcademicLevelUpdateOneWithoutSchoolsNestedInput
    photos?: SchoolPhotoUpdateManyWithoutSchoolNestedInput
    reviews?: SchoolReviewUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photos?: SchoolPhotoUncheckedUpdateManyWithoutSchoolNestedInput
    reviews?: SchoolReviewUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateManyInput = {
    id?: number
    name: string
    address?: string | null
    districtId: number
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    curriculumId?: number | null
    academicLevelId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SchoolUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolReviewCreateInput = {
    title: string
    review: string
    rating: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutSchoolReviewsInput
    school: SchoolCreateNestedOneWithoutReviewsInput
  }

  export type SchoolReviewUncheckedCreateInput = {
    id?: number
    title: string
    review: string
    rating: number
    userId?: number | null
    schoolId: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SchoolReviewUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    review?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutSchoolReviewsNestedInput
    school?: SchoolUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type SchoolReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    review?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    schoolId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolReviewCreateManyInput = {
    id?: number
    title: string
    review: string
    rating: number
    userId?: number | null
    schoolId: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SchoolReviewUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    review?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    review?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    schoolId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolPhotoCreateInput = {
    path: string
    type?: $Enums.PhotoType
    createdAt?: Date | string
    school?: SchoolCreateNestedOneWithoutPhotosInput
  }

  export type SchoolPhotoUncheckedCreateInput = {
    id?: number
    path: string
    type?: $Enums.PhotoType
    schoolId?: number | null
    createdAt?: Date | string
  }

  export type SchoolPhotoUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneWithoutPhotosNestedInput
  }

  export type SchoolPhotoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    schoolId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolPhotoCreateManyInput = {
    id?: number
    path: string
    type?: $Enums.PhotoType
    schoolId?: number | null
    createdAt?: Date | string
  }

  export type SchoolPhotoUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolPhotoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    schoolId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicLevelCreateInput = {
    level: string
    schools?: SchoolCreateNestedManyWithoutAcademicLevelInput
    subjects?: SubjectCreateNestedManyWithoutAcademicLevelInput
    curriculum?: CurriculumCreateNestedOneWithoutLevelsInput
  }

  export type AcademicLevelUncheckedCreateInput = {
    id?: number
    level: string
    curriculumId?: number | null
    schools?: SchoolUncheckedCreateNestedManyWithoutAcademicLevelInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutAcademicLevelInput
  }

  export type AcademicLevelUpdateInput = {
    level?: StringFieldUpdateOperationsInput | string
    schools?: SchoolUpdateManyWithoutAcademicLevelNestedInput
    subjects?: SubjectUpdateManyWithoutAcademicLevelNestedInput
    curriculum?: CurriculumUpdateOneWithoutLevelsNestedInput
  }

  export type AcademicLevelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    schools?: SchoolUncheckedUpdateManyWithoutAcademicLevelNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutAcademicLevelNestedInput
  }

  export type AcademicLevelCreateManyInput = {
    id?: number
    level: string
    curriculumId?: number | null
  }

  export type AcademicLevelUpdateManyMutationInput = {
    level?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicLevelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CurriculumCreateInput = {
    name: string
    description?: string | null
    schools?: SchoolCreateNestedManyWithoutCurriculumInput
    subjects?: SubjectCreateNestedManyWithoutCurriculumInput
    levels?: AcademicLevelCreateNestedManyWithoutCurriculumInput
  }

  export type CurriculumUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    schools?: SchoolUncheckedCreateNestedManyWithoutCurriculumInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutCurriculumInput
    levels?: AcademicLevelUncheckedCreateNestedManyWithoutCurriculumInput
  }

  export type CurriculumUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schools?: SchoolUpdateManyWithoutCurriculumNestedInput
    subjects?: SubjectUpdateManyWithoutCurriculumNestedInput
    levels?: AcademicLevelUpdateManyWithoutCurriculumNestedInput
  }

  export type CurriculumUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schools?: SchoolUncheckedUpdateManyWithoutCurriculumNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutCurriculumNestedInput
    levels?: AcademicLevelUncheckedUpdateManyWithoutCurriculumNestedInput
  }

  export type CurriculumCreateManyInput = {
    id?: number
    name: string
    description?: string | null
  }

  export type CurriculumUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CurriculumUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubjectCreateInput = {
    subject: string
    curriculum?: CurriculumCreateNestedOneWithoutSubjectsInput
    academicLevel?: AcademicLevelCreateNestedOneWithoutSubjectsInput
    schoolsAttached?: SchoolSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: number
    curriculumId?: number | null
    subject: string
    academicLevelId?: number | null
    schoolsAttached?: SchoolSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    subject?: StringFieldUpdateOperationsInput | string
    curriculum?: CurriculumUpdateOneWithoutSubjectsNestedInput
    academicLevel?: AcademicLevelUpdateOneWithoutSubjectsNestedInput
    schoolsAttached?: SchoolSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    subject?: StringFieldUpdateOperationsInput | string
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    schoolsAttached?: SchoolSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: number
    curriculumId?: number | null
    subject: string
    academicLevelId?: number | null
  }

  export type SubjectUpdateManyMutationInput = {
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    subject?: StringFieldUpdateOperationsInput | string
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SchoolSubjectCreateInput = {
    school: SchoolCreateNestedOneWithoutSubjectsInput
    subject: SubjectCreateNestedOneWithoutSchoolsAttachedInput
  }

  export type SchoolSubjectUncheckedCreateInput = {
    id?: number
    schoolId: number
    subjectId: number
  }

  export type SchoolSubjectUpdateInput = {
    school?: SchoolUpdateOneRequiredWithoutSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutSchoolsAttachedNestedInput
  }

  export type SchoolSubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type SchoolSubjectCreateManyInput = {
    id?: number
    schoolId: number
    subjectId: number
  }

  export type SchoolSubjectUpdateManyMutationInput = {

  }

  export type SchoolSubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type DistrictCreateInput = {
    name: string
    region?: string | null
    schools?: SchoolCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateInput = {
    id?: number
    name: string
    region?: string | null
    schools?: SchoolUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    schools?: SchoolUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    schools?: SchoolUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictCreateManyInput = {
    id?: number
    name: string
    region?: string | null
  }

  export type DistrictUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistrictUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SchoolReviewListRelationFilter = {
    every?: SchoolReviewWhereInput
    some?: SchoolReviewWhereInput
    none?: SchoolReviewWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SchoolReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DistrictRelationFilter = {
    is?: DistrictWhereInput
    isNot?: DistrictWhereInput
  }

  export type CurriculumNullableRelationFilter = {
    is?: CurriculumWhereInput | null
    isNot?: CurriculumWhereInput | null
  }

  export type AcademicLevelNullableRelationFilter = {
    is?: AcademicLevelWhereInput | null
    isNot?: AcademicLevelWhereInput | null
  }

  export type SchoolPhotoListRelationFilter = {
    every?: SchoolPhotoWhereInput
    some?: SchoolPhotoWhereInput
    none?: SchoolPhotoWhereInput
  }

  export type SchoolSubjectListRelationFilter = {
    every?: SchoolSubjectWhereInput
    some?: SchoolSubjectWhereInput
    none?: SchoolSubjectWhereInput
  }

  export type SchoolPhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolSubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    districtId?: SortOrder
    about?: SortOrder
    history?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    curriculumId?: SortOrder
    academicLevelId?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SchoolAvgOrderByAggregateInput = {
    id?: SortOrder
    districtId?: SortOrder
    curriculumId?: SortOrder
    academicLevelId?: SortOrder
  }

  export type SchoolMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    districtId?: SortOrder
    about?: SortOrder
    history?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    curriculumId?: SortOrder
    academicLevelId?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SchoolMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    districtId?: SortOrder
    about?: SortOrder
    history?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    curriculumId?: SortOrder
    academicLevelId?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SchoolSumOrderByAggregateInput = {
    id?: SortOrder
    districtId?: SortOrder
    curriculumId?: SortOrder
    academicLevelId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SchoolRelationFilter = {
    is?: SchoolWhereInput
    isNot?: SchoolWhereInput
  }

  export type SchoolReviewCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    review?: SortOrder
    rating?: SortOrder
    userId?: SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SchoolReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    userId?: SortOrder
    schoolId?: SortOrder
  }

  export type SchoolReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    review?: SortOrder
    rating?: SortOrder
    userId?: SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SchoolReviewMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    review?: SortOrder
    rating?: SortOrder
    userId?: SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SchoolReviewSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    userId?: SortOrder
    schoolId?: SortOrder
  }

  export type EnumPhotoTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoType | EnumPhotoTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoTypeFilter<$PrismaModel> | $Enums.PhotoType
  }

  export type SchoolNullableRelationFilter = {
    is?: SchoolWhereInput | null
    isNot?: SchoolWhereInput | null
  }

  export type SchoolPhotoCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    type?: SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
  }

  export type SchoolPhotoAvgOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
  }

  export type SchoolPhotoMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    type?: SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
  }

  export type SchoolPhotoMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    type?: SortOrder
    schoolId?: SortOrder
    createdAt?: SortOrder
  }

  export type SchoolPhotoSumOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
  }

  export type EnumPhotoTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoType | EnumPhotoTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoTypeWithAggregatesFilter<$PrismaModel> | $Enums.PhotoType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhotoTypeFilter<$PrismaModel>
    _max?: NestedEnumPhotoTypeFilter<$PrismaModel>
  }

  export type SchoolListRelationFilter = {
    every?: SchoolWhereInput
    some?: SchoolWhereInput
    none?: SchoolWhereInput
  }

  export type SubjectListRelationFilter = {
    every?: SubjectWhereInput
    some?: SubjectWhereInput
    none?: SubjectWhereInput
  }

  export type SchoolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AcademicLevelCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    curriculumId?: SortOrder
  }

  export type AcademicLevelAvgOrderByAggregateInput = {
    id?: SortOrder
    curriculumId?: SortOrder
  }

  export type AcademicLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    curriculumId?: SortOrder
  }

  export type AcademicLevelMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    curriculumId?: SortOrder
  }

  export type AcademicLevelSumOrderByAggregateInput = {
    id?: SortOrder
    curriculumId?: SortOrder
  }

  export type AcademicLevelListRelationFilter = {
    every?: AcademicLevelWhereInput
    some?: AcademicLevelWhereInput
    none?: AcademicLevelWhereInput
  }

  export type AcademicLevelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CurriculumCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type CurriculumAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CurriculumMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type CurriculumMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type CurriculumSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    curriculumId?: SortOrder
    subject?: SortOrder
    academicLevelId?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    id?: SortOrder
    curriculumId?: SortOrder
    academicLevelId?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    curriculumId?: SortOrder
    subject?: SortOrder
    academicLevelId?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    curriculumId?: SortOrder
    subject?: SortOrder
    academicLevelId?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    id?: SortOrder
    curriculumId?: SortOrder
    academicLevelId?: SortOrder
  }

  export type SubjectRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type SchoolSubjectCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    subjectId?: SortOrder
  }

  export type SchoolSubjectAvgOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    subjectId?: SortOrder
  }

  export type SchoolSubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    subjectId?: SortOrder
  }

  export type SchoolSubjectMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    subjectId?: SortOrder
  }

  export type SchoolSubjectSumOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    subjectId?: SortOrder
  }

  export type DistrictCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrder
  }

  export type DistrictAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DistrictMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrder
  }

  export type DistrictMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrder
  }

  export type DistrictSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SchoolReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<SchoolReviewCreateWithoutUserInput, SchoolReviewUncheckedCreateWithoutUserInput> | SchoolReviewCreateWithoutUserInput[] | SchoolReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SchoolReviewCreateOrConnectWithoutUserInput | SchoolReviewCreateOrConnectWithoutUserInput[]
    createMany?: SchoolReviewCreateManyUserInputEnvelope
    connect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
  }

  export type SchoolReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SchoolReviewCreateWithoutUserInput, SchoolReviewUncheckedCreateWithoutUserInput> | SchoolReviewCreateWithoutUserInput[] | SchoolReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SchoolReviewCreateOrConnectWithoutUserInput | SchoolReviewCreateOrConnectWithoutUserInput[]
    createMany?: SchoolReviewCreateManyUserInputEnvelope
    connect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SchoolReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<SchoolReviewCreateWithoutUserInput, SchoolReviewUncheckedCreateWithoutUserInput> | SchoolReviewCreateWithoutUserInput[] | SchoolReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SchoolReviewCreateOrConnectWithoutUserInput | SchoolReviewCreateOrConnectWithoutUserInput[]
    upsert?: SchoolReviewUpsertWithWhereUniqueWithoutUserInput | SchoolReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SchoolReviewCreateManyUserInputEnvelope
    set?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    disconnect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    delete?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    connect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    update?: SchoolReviewUpdateWithWhereUniqueWithoutUserInput | SchoolReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SchoolReviewUpdateManyWithWhereWithoutUserInput | SchoolReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SchoolReviewScalarWhereInput | SchoolReviewScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SchoolReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SchoolReviewCreateWithoutUserInput, SchoolReviewUncheckedCreateWithoutUserInput> | SchoolReviewCreateWithoutUserInput[] | SchoolReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SchoolReviewCreateOrConnectWithoutUserInput | SchoolReviewCreateOrConnectWithoutUserInput[]
    upsert?: SchoolReviewUpsertWithWhereUniqueWithoutUserInput | SchoolReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SchoolReviewCreateManyUserInputEnvelope
    set?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    disconnect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    delete?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    connect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    update?: SchoolReviewUpdateWithWhereUniqueWithoutUserInput | SchoolReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SchoolReviewUpdateManyWithWhereWithoutUserInput | SchoolReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SchoolReviewScalarWhereInput | SchoolReviewScalarWhereInput[]
  }

  export type DistrictCreateNestedOneWithoutSchoolsInput = {
    create?: XOR<DistrictCreateWithoutSchoolsInput, DistrictUncheckedCreateWithoutSchoolsInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutSchoolsInput
    connect?: DistrictWhereUniqueInput
  }

  export type CurriculumCreateNestedOneWithoutSchoolsInput = {
    create?: XOR<CurriculumCreateWithoutSchoolsInput, CurriculumUncheckedCreateWithoutSchoolsInput>
    connectOrCreate?: CurriculumCreateOrConnectWithoutSchoolsInput
    connect?: CurriculumWhereUniqueInput
  }

  export type AcademicLevelCreateNestedOneWithoutSchoolsInput = {
    create?: XOR<AcademicLevelCreateWithoutSchoolsInput, AcademicLevelUncheckedCreateWithoutSchoolsInput>
    connectOrCreate?: AcademicLevelCreateOrConnectWithoutSchoolsInput
    connect?: AcademicLevelWhereUniqueInput
  }

  export type SchoolPhotoCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SchoolPhotoCreateWithoutSchoolInput, SchoolPhotoUncheckedCreateWithoutSchoolInput> | SchoolPhotoCreateWithoutSchoolInput[] | SchoolPhotoUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolPhotoCreateOrConnectWithoutSchoolInput | SchoolPhotoCreateOrConnectWithoutSchoolInput[]
    createMany?: SchoolPhotoCreateManySchoolInputEnvelope
    connect?: SchoolPhotoWhereUniqueInput | SchoolPhotoWhereUniqueInput[]
  }

  export type SchoolReviewCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SchoolReviewCreateWithoutSchoolInput, SchoolReviewUncheckedCreateWithoutSchoolInput> | SchoolReviewCreateWithoutSchoolInput[] | SchoolReviewUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolReviewCreateOrConnectWithoutSchoolInput | SchoolReviewCreateOrConnectWithoutSchoolInput[]
    createMany?: SchoolReviewCreateManySchoolInputEnvelope
    connect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
  }

  export type SchoolSubjectCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SchoolSubjectCreateWithoutSchoolInput, SchoolSubjectUncheckedCreateWithoutSchoolInput> | SchoolSubjectCreateWithoutSchoolInput[] | SchoolSubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolSubjectCreateOrConnectWithoutSchoolInput | SchoolSubjectCreateOrConnectWithoutSchoolInput[]
    createMany?: SchoolSubjectCreateManySchoolInputEnvelope
    connect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
  }

  export type SchoolPhotoUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SchoolPhotoCreateWithoutSchoolInput, SchoolPhotoUncheckedCreateWithoutSchoolInput> | SchoolPhotoCreateWithoutSchoolInput[] | SchoolPhotoUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolPhotoCreateOrConnectWithoutSchoolInput | SchoolPhotoCreateOrConnectWithoutSchoolInput[]
    createMany?: SchoolPhotoCreateManySchoolInputEnvelope
    connect?: SchoolPhotoWhereUniqueInput | SchoolPhotoWhereUniqueInput[]
  }

  export type SchoolReviewUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SchoolReviewCreateWithoutSchoolInput, SchoolReviewUncheckedCreateWithoutSchoolInput> | SchoolReviewCreateWithoutSchoolInput[] | SchoolReviewUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolReviewCreateOrConnectWithoutSchoolInput | SchoolReviewCreateOrConnectWithoutSchoolInput[]
    createMany?: SchoolReviewCreateManySchoolInputEnvelope
    connect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
  }

  export type SchoolSubjectUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SchoolSubjectCreateWithoutSchoolInput, SchoolSubjectUncheckedCreateWithoutSchoolInput> | SchoolSubjectCreateWithoutSchoolInput[] | SchoolSubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolSubjectCreateOrConnectWithoutSchoolInput | SchoolSubjectCreateOrConnectWithoutSchoolInput[]
    createMany?: SchoolSubjectCreateManySchoolInputEnvelope
    connect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DistrictUpdateOneRequiredWithoutSchoolsNestedInput = {
    create?: XOR<DistrictCreateWithoutSchoolsInput, DistrictUncheckedCreateWithoutSchoolsInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutSchoolsInput
    upsert?: DistrictUpsertWithoutSchoolsInput
    connect?: DistrictWhereUniqueInput
    update?: XOR<XOR<DistrictUpdateToOneWithWhereWithoutSchoolsInput, DistrictUpdateWithoutSchoolsInput>, DistrictUncheckedUpdateWithoutSchoolsInput>
  }

  export type CurriculumUpdateOneWithoutSchoolsNestedInput = {
    create?: XOR<CurriculumCreateWithoutSchoolsInput, CurriculumUncheckedCreateWithoutSchoolsInput>
    connectOrCreate?: CurriculumCreateOrConnectWithoutSchoolsInput
    upsert?: CurriculumUpsertWithoutSchoolsInput
    disconnect?: CurriculumWhereInput | boolean
    delete?: CurriculumWhereInput | boolean
    connect?: CurriculumWhereUniqueInput
    update?: XOR<XOR<CurriculumUpdateToOneWithWhereWithoutSchoolsInput, CurriculumUpdateWithoutSchoolsInput>, CurriculumUncheckedUpdateWithoutSchoolsInput>
  }

  export type AcademicLevelUpdateOneWithoutSchoolsNestedInput = {
    create?: XOR<AcademicLevelCreateWithoutSchoolsInput, AcademicLevelUncheckedCreateWithoutSchoolsInput>
    connectOrCreate?: AcademicLevelCreateOrConnectWithoutSchoolsInput
    upsert?: AcademicLevelUpsertWithoutSchoolsInput
    disconnect?: AcademicLevelWhereInput | boolean
    delete?: AcademicLevelWhereInput | boolean
    connect?: AcademicLevelWhereUniqueInput
    update?: XOR<XOR<AcademicLevelUpdateToOneWithWhereWithoutSchoolsInput, AcademicLevelUpdateWithoutSchoolsInput>, AcademicLevelUncheckedUpdateWithoutSchoolsInput>
  }

  export type SchoolPhotoUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SchoolPhotoCreateWithoutSchoolInput, SchoolPhotoUncheckedCreateWithoutSchoolInput> | SchoolPhotoCreateWithoutSchoolInput[] | SchoolPhotoUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolPhotoCreateOrConnectWithoutSchoolInput | SchoolPhotoCreateOrConnectWithoutSchoolInput[]
    upsert?: SchoolPhotoUpsertWithWhereUniqueWithoutSchoolInput | SchoolPhotoUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SchoolPhotoCreateManySchoolInputEnvelope
    set?: SchoolPhotoWhereUniqueInput | SchoolPhotoWhereUniqueInput[]
    disconnect?: SchoolPhotoWhereUniqueInput | SchoolPhotoWhereUniqueInput[]
    delete?: SchoolPhotoWhereUniqueInput | SchoolPhotoWhereUniqueInput[]
    connect?: SchoolPhotoWhereUniqueInput | SchoolPhotoWhereUniqueInput[]
    update?: SchoolPhotoUpdateWithWhereUniqueWithoutSchoolInput | SchoolPhotoUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SchoolPhotoUpdateManyWithWhereWithoutSchoolInput | SchoolPhotoUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SchoolPhotoScalarWhereInput | SchoolPhotoScalarWhereInput[]
  }

  export type SchoolReviewUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SchoolReviewCreateWithoutSchoolInput, SchoolReviewUncheckedCreateWithoutSchoolInput> | SchoolReviewCreateWithoutSchoolInput[] | SchoolReviewUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolReviewCreateOrConnectWithoutSchoolInput | SchoolReviewCreateOrConnectWithoutSchoolInput[]
    upsert?: SchoolReviewUpsertWithWhereUniqueWithoutSchoolInput | SchoolReviewUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SchoolReviewCreateManySchoolInputEnvelope
    set?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    disconnect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    delete?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    connect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    update?: SchoolReviewUpdateWithWhereUniqueWithoutSchoolInput | SchoolReviewUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SchoolReviewUpdateManyWithWhereWithoutSchoolInput | SchoolReviewUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SchoolReviewScalarWhereInput | SchoolReviewScalarWhereInput[]
  }

  export type SchoolSubjectUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SchoolSubjectCreateWithoutSchoolInput, SchoolSubjectUncheckedCreateWithoutSchoolInput> | SchoolSubjectCreateWithoutSchoolInput[] | SchoolSubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolSubjectCreateOrConnectWithoutSchoolInput | SchoolSubjectCreateOrConnectWithoutSchoolInput[]
    upsert?: SchoolSubjectUpsertWithWhereUniqueWithoutSchoolInput | SchoolSubjectUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SchoolSubjectCreateManySchoolInputEnvelope
    set?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    disconnect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    delete?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    connect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    update?: SchoolSubjectUpdateWithWhereUniqueWithoutSchoolInput | SchoolSubjectUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SchoolSubjectUpdateManyWithWhereWithoutSchoolInput | SchoolSubjectUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SchoolSubjectScalarWhereInput | SchoolSubjectScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SchoolPhotoUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SchoolPhotoCreateWithoutSchoolInput, SchoolPhotoUncheckedCreateWithoutSchoolInput> | SchoolPhotoCreateWithoutSchoolInput[] | SchoolPhotoUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolPhotoCreateOrConnectWithoutSchoolInput | SchoolPhotoCreateOrConnectWithoutSchoolInput[]
    upsert?: SchoolPhotoUpsertWithWhereUniqueWithoutSchoolInput | SchoolPhotoUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SchoolPhotoCreateManySchoolInputEnvelope
    set?: SchoolPhotoWhereUniqueInput | SchoolPhotoWhereUniqueInput[]
    disconnect?: SchoolPhotoWhereUniqueInput | SchoolPhotoWhereUniqueInput[]
    delete?: SchoolPhotoWhereUniqueInput | SchoolPhotoWhereUniqueInput[]
    connect?: SchoolPhotoWhereUniqueInput | SchoolPhotoWhereUniqueInput[]
    update?: SchoolPhotoUpdateWithWhereUniqueWithoutSchoolInput | SchoolPhotoUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SchoolPhotoUpdateManyWithWhereWithoutSchoolInput | SchoolPhotoUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SchoolPhotoScalarWhereInput | SchoolPhotoScalarWhereInput[]
  }

  export type SchoolReviewUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SchoolReviewCreateWithoutSchoolInput, SchoolReviewUncheckedCreateWithoutSchoolInput> | SchoolReviewCreateWithoutSchoolInput[] | SchoolReviewUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolReviewCreateOrConnectWithoutSchoolInput | SchoolReviewCreateOrConnectWithoutSchoolInput[]
    upsert?: SchoolReviewUpsertWithWhereUniqueWithoutSchoolInput | SchoolReviewUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SchoolReviewCreateManySchoolInputEnvelope
    set?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    disconnect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    delete?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    connect?: SchoolReviewWhereUniqueInput | SchoolReviewWhereUniqueInput[]
    update?: SchoolReviewUpdateWithWhereUniqueWithoutSchoolInput | SchoolReviewUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SchoolReviewUpdateManyWithWhereWithoutSchoolInput | SchoolReviewUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SchoolReviewScalarWhereInput | SchoolReviewScalarWhereInput[]
  }

  export type SchoolSubjectUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SchoolSubjectCreateWithoutSchoolInput, SchoolSubjectUncheckedCreateWithoutSchoolInput> | SchoolSubjectCreateWithoutSchoolInput[] | SchoolSubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolSubjectCreateOrConnectWithoutSchoolInput | SchoolSubjectCreateOrConnectWithoutSchoolInput[]
    upsert?: SchoolSubjectUpsertWithWhereUniqueWithoutSchoolInput | SchoolSubjectUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SchoolSubjectCreateManySchoolInputEnvelope
    set?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    disconnect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    delete?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    connect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    update?: SchoolSubjectUpdateWithWhereUniqueWithoutSchoolInput | SchoolSubjectUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SchoolSubjectUpdateManyWithWhereWithoutSchoolInput | SchoolSubjectUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SchoolSubjectScalarWhereInput | SchoolSubjectScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSchoolReviewsInput = {
    create?: XOR<UserCreateWithoutSchoolReviewsInput, UserUncheckedCreateWithoutSchoolReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSchoolReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type SchoolCreateNestedOneWithoutReviewsInput = {
    create?: XOR<SchoolCreateWithoutReviewsInput, SchoolUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutReviewsInput
    connect?: SchoolWhereUniqueInput
  }

  export type UserUpdateOneWithoutSchoolReviewsNestedInput = {
    create?: XOR<UserCreateWithoutSchoolReviewsInput, UserUncheckedCreateWithoutSchoolReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSchoolReviewsInput
    upsert?: UserUpsertWithoutSchoolReviewsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSchoolReviewsInput, UserUpdateWithoutSchoolReviewsInput>, UserUncheckedUpdateWithoutSchoolReviewsInput>
  }

  export type SchoolUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<SchoolCreateWithoutReviewsInput, SchoolUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutReviewsInput
    upsert?: SchoolUpsertWithoutReviewsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutReviewsInput, SchoolUpdateWithoutReviewsInput>, SchoolUncheckedUpdateWithoutReviewsInput>
  }

  export type SchoolCreateNestedOneWithoutPhotosInput = {
    create?: XOR<SchoolCreateWithoutPhotosInput, SchoolUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutPhotosInput
    connect?: SchoolWhereUniqueInput
  }

  export type EnumPhotoTypeFieldUpdateOperationsInput = {
    set?: $Enums.PhotoType
  }

  export type SchoolUpdateOneWithoutPhotosNestedInput = {
    create?: XOR<SchoolCreateWithoutPhotosInput, SchoolUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutPhotosInput
    upsert?: SchoolUpsertWithoutPhotosInput
    disconnect?: SchoolWhereInput | boolean
    delete?: SchoolWhereInput | boolean
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutPhotosInput, SchoolUpdateWithoutPhotosInput>, SchoolUncheckedUpdateWithoutPhotosInput>
  }

  export type SchoolCreateNestedManyWithoutAcademicLevelInput = {
    create?: XOR<SchoolCreateWithoutAcademicLevelInput, SchoolUncheckedCreateWithoutAcademicLevelInput> | SchoolCreateWithoutAcademicLevelInput[] | SchoolUncheckedCreateWithoutAcademicLevelInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutAcademicLevelInput | SchoolCreateOrConnectWithoutAcademicLevelInput[]
    createMany?: SchoolCreateManyAcademicLevelInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type SubjectCreateNestedManyWithoutAcademicLevelInput = {
    create?: XOR<SubjectCreateWithoutAcademicLevelInput, SubjectUncheckedCreateWithoutAcademicLevelInput> | SubjectCreateWithoutAcademicLevelInput[] | SubjectUncheckedCreateWithoutAcademicLevelInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutAcademicLevelInput | SubjectCreateOrConnectWithoutAcademicLevelInput[]
    createMany?: SubjectCreateManyAcademicLevelInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type CurriculumCreateNestedOneWithoutLevelsInput = {
    create?: XOR<CurriculumCreateWithoutLevelsInput, CurriculumUncheckedCreateWithoutLevelsInput>
    connectOrCreate?: CurriculumCreateOrConnectWithoutLevelsInput
    connect?: CurriculumWhereUniqueInput
  }

  export type SchoolUncheckedCreateNestedManyWithoutAcademicLevelInput = {
    create?: XOR<SchoolCreateWithoutAcademicLevelInput, SchoolUncheckedCreateWithoutAcademicLevelInput> | SchoolCreateWithoutAcademicLevelInput[] | SchoolUncheckedCreateWithoutAcademicLevelInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutAcademicLevelInput | SchoolCreateOrConnectWithoutAcademicLevelInput[]
    createMany?: SchoolCreateManyAcademicLevelInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutAcademicLevelInput = {
    create?: XOR<SubjectCreateWithoutAcademicLevelInput, SubjectUncheckedCreateWithoutAcademicLevelInput> | SubjectCreateWithoutAcademicLevelInput[] | SubjectUncheckedCreateWithoutAcademicLevelInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutAcademicLevelInput | SubjectCreateOrConnectWithoutAcademicLevelInput[]
    createMany?: SubjectCreateManyAcademicLevelInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type SchoolUpdateManyWithoutAcademicLevelNestedInput = {
    create?: XOR<SchoolCreateWithoutAcademicLevelInput, SchoolUncheckedCreateWithoutAcademicLevelInput> | SchoolCreateWithoutAcademicLevelInput[] | SchoolUncheckedCreateWithoutAcademicLevelInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutAcademicLevelInput | SchoolCreateOrConnectWithoutAcademicLevelInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutAcademicLevelInput | SchoolUpsertWithWhereUniqueWithoutAcademicLevelInput[]
    createMany?: SchoolCreateManyAcademicLevelInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutAcademicLevelInput | SchoolUpdateWithWhereUniqueWithoutAcademicLevelInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutAcademicLevelInput | SchoolUpdateManyWithWhereWithoutAcademicLevelInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type SubjectUpdateManyWithoutAcademicLevelNestedInput = {
    create?: XOR<SubjectCreateWithoutAcademicLevelInput, SubjectUncheckedCreateWithoutAcademicLevelInput> | SubjectCreateWithoutAcademicLevelInput[] | SubjectUncheckedCreateWithoutAcademicLevelInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutAcademicLevelInput | SubjectCreateOrConnectWithoutAcademicLevelInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutAcademicLevelInput | SubjectUpsertWithWhereUniqueWithoutAcademicLevelInput[]
    createMany?: SubjectCreateManyAcademicLevelInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutAcademicLevelInput | SubjectUpdateWithWhereUniqueWithoutAcademicLevelInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutAcademicLevelInput | SubjectUpdateManyWithWhereWithoutAcademicLevelInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type CurriculumUpdateOneWithoutLevelsNestedInput = {
    create?: XOR<CurriculumCreateWithoutLevelsInput, CurriculumUncheckedCreateWithoutLevelsInput>
    connectOrCreate?: CurriculumCreateOrConnectWithoutLevelsInput
    upsert?: CurriculumUpsertWithoutLevelsInput
    disconnect?: CurriculumWhereInput | boolean
    delete?: CurriculumWhereInput | boolean
    connect?: CurriculumWhereUniqueInput
    update?: XOR<XOR<CurriculumUpdateToOneWithWhereWithoutLevelsInput, CurriculumUpdateWithoutLevelsInput>, CurriculumUncheckedUpdateWithoutLevelsInput>
  }

  export type SchoolUncheckedUpdateManyWithoutAcademicLevelNestedInput = {
    create?: XOR<SchoolCreateWithoutAcademicLevelInput, SchoolUncheckedCreateWithoutAcademicLevelInput> | SchoolCreateWithoutAcademicLevelInput[] | SchoolUncheckedCreateWithoutAcademicLevelInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutAcademicLevelInput | SchoolCreateOrConnectWithoutAcademicLevelInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutAcademicLevelInput | SchoolUpsertWithWhereUniqueWithoutAcademicLevelInput[]
    createMany?: SchoolCreateManyAcademicLevelInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutAcademicLevelInput | SchoolUpdateWithWhereUniqueWithoutAcademicLevelInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutAcademicLevelInput | SchoolUpdateManyWithWhereWithoutAcademicLevelInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutAcademicLevelNestedInput = {
    create?: XOR<SubjectCreateWithoutAcademicLevelInput, SubjectUncheckedCreateWithoutAcademicLevelInput> | SubjectCreateWithoutAcademicLevelInput[] | SubjectUncheckedCreateWithoutAcademicLevelInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutAcademicLevelInput | SubjectCreateOrConnectWithoutAcademicLevelInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutAcademicLevelInput | SubjectUpsertWithWhereUniqueWithoutAcademicLevelInput[]
    createMany?: SubjectCreateManyAcademicLevelInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutAcademicLevelInput | SubjectUpdateWithWhereUniqueWithoutAcademicLevelInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutAcademicLevelInput | SubjectUpdateManyWithWhereWithoutAcademicLevelInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type SchoolCreateNestedManyWithoutCurriculumInput = {
    create?: XOR<SchoolCreateWithoutCurriculumInput, SchoolUncheckedCreateWithoutCurriculumInput> | SchoolCreateWithoutCurriculumInput[] | SchoolUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutCurriculumInput | SchoolCreateOrConnectWithoutCurriculumInput[]
    createMany?: SchoolCreateManyCurriculumInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type SubjectCreateNestedManyWithoutCurriculumInput = {
    create?: XOR<SubjectCreateWithoutCurriculumInput, SubjectUncheckedCreateWithoutCurriculumInput> | SubjectCreateWithoutCurriculumInput[] | SubjectUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutCurriculumInput | SubjectCreateOrConnectWithoutCurriculumInput[]
    createMany?: SubjectCreateManyCurriculumInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type AcademicLevelCreateNestedManyWithoutCurriculumInput = {
    create?: XOR<AcademicLevelCreateWithoutCurriculumInput, AcademicLevelUncheckedCreateWithoutCurriculumInput> | AcademicLevelCreateWithoutCurriculumInput[] | AcademicLevelUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: AcademicLevelCreateOrConnectWithoutCurriculumInput | AcademicLevelCreateOrConnectWithoutCurriculumInput[]
    createMany?: AcademicLevelCreateManyCurriculumInputEnvelope
    connect?: AcademicLevelWhereUniqueInput | AcademicLevelWhereUniqueInput[]
  }

  export type SchoolUncheckedCreateNestedManyWithoutCurriculumInput = {
    create?: XOR<SchoolCreateWithoutCurriculumInput, SchoolUncheckedCreateWithoutCurriculumInput> | SchoolCreateWithoutCurriculumInput[] | SchoolUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutCurriculumInput | SchoolCreateOrConnectWithoutCurriculumInput[]
    createMany?: SchoolCreateManyCurriculumInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutCurriculumInput = {
    create?: XOR<SubjectCreateWithoutCurriculumInput, SubjectUncheckedCreateWithoutCurriculumInput> | SubjectCreateWithoutCurriculumInput[] | SubjectUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutCurriculumInput | SubjectCreateOrConnectWithoutCurriculumInput[]
    createMany?: SubjectCreateManyCurriculumInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type AcademicLevelUncheckedCreateNestedManyWithoutCurriculumInput = {
    create?: XOR<AcademicLevelCreateWithoutCurriculumInput, AcademicLevelUncheckedCreateWithoutCurriculumInput> | AcademicLevelCreateWithoutCurriculumInput[] | AcademicLevelUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: AcademicLevelCreateOrConnectWithoutCurriculumInput | AcademicLevelCreateOrConnectWithoutCurriculumInput[]
    createMany?: AcademicLevelCreateManyCurriculumInputEnvelope
    connect?: AcademicLevelWhereUniqueInput | AcademicLevelWhereUniqueInput[]
  }

  export type SchoolUpdateManyWithoutCurriculumNestedInput = {
    create?: XOR<SchoolCreateWithoutCurriculumInput, SchoolUncheckedCreateWithoutCurriculumInput> | SchoolCreateWithoutCurriculumInput[] | SchoolUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutCurriculumInput | SchoolCreateOrConnectWithoutCurriculumInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutCurriculumInput | SchoolUpsertWithWhereUniqueWithoutCurriculumInput[]
    createMany?: SchoolCreateManyCurriculumInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutCurriculumInput | SchoolUpdateWithWhereUniqueWithoutCurriculumInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutCurriculumInput | SchoolUpdateManyWithWhereWithoutCurriculumInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type SubjectUpdateManyWithoutCurriculumNestedInput = {
    create?: XOR<SubjectCreateWithoutCurriculumInput, SubjectUncheckedCreateWithoutCurriculumInput> | SubjectCreateWithoutCurriculumInput[] | SubjectUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutCurriculumInput | SubjectCreateOrConnectWithoutCurriculumInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutCurriculumInput | SubjectUpsertWithWhereUniqueWithoutCurriculumInput[]
    createMany?: SubjectCreateManyCurriculumInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutCurriculumInput | SubjectUpdateWithWhereUniqueWithoutCurriculumInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutCurriculumInput | SubjectUpdateManyWithWhereWithoutCurriculumInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type AcademicLevelUpdateManyWithoutCurriculumNestedInput = {
    create?: XOR<AcademicLevelCreateWithoutCurriculumInput, AcademicLevelUncheckedCreateWithoutCurriculumInput> | AcademicLevelCreateWithoutCurriculumInput[] | AcademicLevelUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: AcademicLevelCreateOrConnectWithoutCurriculumInput | AcademicLevelCreateOrConnectWithoutCurriculumInput[]
    upsert?: AcademicLevelUpsertWithWhereUniqueWithoutCurriculumInput | AcademicLevelUpsertWithWhereUniqueWithoutCurriculumInput[]
    createMany?: AcademicLevelCreateManyCurriculumInputEnvelope
    set?: AcademicLevelWhereUniqueInput | AcademicLevelWhereUniqueInput[]
    disconnect?: AcademicLevelWhereUniqueInput | AcademicLevelWhereUniqueInput[]
    delete?: AcademicLevelWhereUniqueInput | AcademicLevelWhereUniqueInput[]
    connect?: AcademicLevelWhereUniqueInput | AcademicLevelWhereUniqueInput[]
    update?: AcademicLevelUpdateWithWhereUniqueWithoutCurriculumInput | AcademicLevelUpdateWithWhereUniqueWithoutCurriculumInput[]
    updateMany?: AcademicLevelUpdateManyWithWhereWithoutCurriculumInput | AcademicLevelUpdateManyWithWhereWithoutCurriculumInput[]
    deleteMany?: AcademicLevelScalarWhereInput | AcademicLevelScalarWhereInput[]
  }

  export type SchoolUncheckedUpdateManyWithoutCurriculumNestedInput = {
    create?: XOR<SchoolCreateWithoutCurriculumInput, SchoolUncheckedCreateWithoutCurriculumInput> | SchoolCreateWithoutCurriculumInput[] | SchoolUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutCurriculumInput | SchoolCreateOrConnectWithoutCurriculumInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutCurriculumInput | SchoolUpsertWithWhereUniqueWithoutCurriculumInput[]
    createMany?: SchoolCreateManyCurriculumInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutCurriculumInput | SchoolUpdateWithWhereUniqueWithoutCurriculumInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutCurriculumInput | SchoolUpdateManyWithWhereWithoutCurriculumInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutCurriculumNestedInput = {
    create?: XOR<SubjectCreateWithoutCurriculumInput, SubjectUncheckedCreateWithoutCurriculumInput> | SubjectCreateWithoutCurriculumInput[] | SubjectUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutCurriculumInput | SubjectCreateOrConnectWithoutCurriculumInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutCurriculumInput | SubjectUpsertWithWhereUniqueWithoutCurriculumInput[]
    createMany?: SubjectCreateManyCurriculumInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutCurriculumInput | SubjectUpdateWithWhereUniqueWithoutCurriculumInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutCurriculumInput | SubjectUpdateManyWithWhereWithoutCurriculumInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type AcademicLevelUncheckedUpdateManyWithoutCurriculumNestedInput = {
    create?: XOR<AcademicLevelCreateWithoutCurriculumInput, AcademicLevelUncheckedCreateWithoutCurriculumInput> | AcademicLevelCreateWithoutCurriculumInput[] | AcademicLevelUncheckedCreateWithoutCurriculumInput[]
    connectOrCreate?: AcademicLevelCreateOrConnectWithoutCurriculumInput | AcademicLevelCreateOrConnectWithoutCurriculumInput[]
    upsert?: AcademicLevelUpsertWithWhereUniqueWithoutCurriculumInput | AcademicLevelUpsertWithWhereUniqueWithoutCurriculumInput[]
    createMany?: AcademicLevelCreateManyCurriculumInputEnvelope
    set?: AcademicLevelWhereUniqueInput | AcademicLevelWhereUniqueInput[]
    disconnect?: AcademicLevelWhereUniqueInput | AcademicLevelWhereUniqueInput[]
    delete?: AcademicLevelWhereUniqueInput | AcademicLevelWhereUniqueInput[]
    connect?: AcademicLevelWhereUniqueInput | AcademicLevelWhereUniqueInput[]
    update?: AcademicLevelUpdateWithWhereUniqueWithoutCurriculumInput | AcademicLevelUpdateWithWhereUniqueWithoutCurriculumInput[]
    updateMany?: AcademicLevelUpdateManyWithWhereWithoutCurriculumInput | AcademicLevelUpdateManyWithWhereWithoutCurriculumInput[]
    deleteMany?: AcademicLevelScalarWhereInput | AcademicLevelScalarWhereInput[]
  }

  export type CurriculumCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<CurriculumCreateWithoutSubjectsInput, CurriculumUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: CurriculumCreateOrConnectWithoutSubjectsInput
    connect?: CurriculumWhereUniqueInput
  }

  export type AcademicLevelCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<AcademicLevelCreateWithoutSubjectsInput, AcademicLevelUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: AcademicLevelCreateOrConnectWithoutSubjectsInput
    connect?: AcademicLevelWhereUniqueInput
  }

  export type SchoolSubjectCreateNestedManyWithoutSubjectInput = {
    create?: XOR<SchoolSubjectCreateWithoutSubjectInput, SchoolSubjectUncheckedCreateWithoutSubjectInput> | SchoolSubjectCreateWithoutSubjectInput[] | SchoolSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SchoolSubjectCreateOrConnectWithoutSubjectInput | SchoolSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: SchoolSubjectCreateManySubjectInputEnvelope
    connect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
  }

  export type SchoolSubjectUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<SchoolSubjectCreateWithoutSubjectInput, SchoolSubjectUncheckedCreateWithoutSubjectInput> | SchoolSubjectCreateWithoutSubjectInput[] | SchoolSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SchoolSubjectCreateOrConnectWithoutSubjectInput | SchoolSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: SchoolSubjectCreateManySubjectInputEnvelope
    connect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
  }

  export type CurriculumUpdateOneWithoutSubjectsNestedInput = {
    create?: XOR<CurriculumCreateWithoutSubjectsInput, CurriculumUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: CurriculumCreateOrConnectWithoutSubjectsInput
    upsert?: CurriculumUpsertWithoutSubjectsInput
    disconnect?: CurriculumWhereInput | boolean
    delete?: CurriculumWhereInput | boolean
    connect?: CurriculumWhereUniqueInput
    update?: XOR<XOR<CurriculumUpdateToOneWithWhereWithoutSubjectsInput, CurriculumUpdateWithoutSubjectsInput>, CurriculumUncheckedUpdateWithoutSubjectsInput>
  }

  export type AcademicLevelUpdateOneWithoutSubjectsNestedInput = {
    create?: XOR<AcademicLevelCreateWithoutSubjectsInput, AcademicLevelUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: AcademicLevelCreateOrConnectWithoutSubjectsInput
    upsert?: AcademicLevelUpsertWithoutSubjectsInput
    disconnect?: AcademicLevelWhereInput | boolean
    delete?: AcademicLevelWhereInput | boolean
    connect?: AcademicLevelWhereUniqueInput
    update?: XOR<XOR<AcademicLevelUpdateToOneWithWhereWithoutSubjectsInput, AcademicLevelUpdateWithoutSubjectsInput>, AcademicLevelUncheckedUpdateWithoutSubjectsInput>
  }

  export type SchoolSubjectUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<SchoolSubjectCreateWithoutSubjectInput, SchoolSubjectUncheckedCreateWithoutSubjectInput> | SchoolSubjectCreateWithoutSubjectInput[] | SchoolSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SchoolSubjectCreateOrConnectWithoutSubjectInput | SchoolSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: SchoolSubjectUpsertWithWhereUniqueWithoutSubjectInput | SchoolSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: SchoolSubjectCreateManySubjectInputEnvelope
    set?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    disconnect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    delete?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    connect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    update?: SchoolSubjectUpdateWithWhereUniqueWithoutSubjectInput | SchoolSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: SchoolSubjectUpdateManyWithWhereWithoutSubjectInput | SchoolSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: SchoolSubjectScalarWhereInput | SchoolSubjectScalarWhereInput[]
  }

  export type SchoolSubjectUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<SchoolSubjectCreateWithoutSubjectInput, SchoolSubjectUncheckedCreateWithoutSubjectInput> | SchoolSubjectCreateWithoutSubjectInput[] | SchoolSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SchoolSubjectCreateOrConnectWithoutSubjectInput | SchoolSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: SchoolSubjectUpsertWithWhereUniqueWithoutSubjectInput | SchoolSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: SchoolSubjectCreateManySubjectInputEnvelope
    set?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    disconnect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    delete?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    connect?: SchoolSubjectWhereUniqueInput | SchoolSubjectWhereUniqueInput[]
    update?: SchoolSubjectUpdateWithWhereUniqueWithoutSubjectInput | SchoolSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: SchoolSubjectUpdateManyWithWhereWithoutSubjectInput | SchoolSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: SchoolSubjectScalarWhereInput | SchoolSubjectScalarWhereInput[]
  }

  export type SchoolCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<SchoolCreateWithoutSubjectsInput, SchoolUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutSubjectsInput
    connect?: SchoolWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutSchoolsAttachedInput = {
    create?: XOR<SubjectCreateWithoutSchoolsAttachedInput, SubjectUncheckedCreateWithoutSchoolsAttachedInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutSchoolsAttachedInput
    connect?: SubjectWhereUniqueInput
  }

  export type SchoolUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<SchoolCreateWithoutSubjectsInput, SchoolUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutSubjectsInput
    upsert?: SchoolUpsertWithoutSubjectsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutSubjectsInput, SchoolUpdateWithoutSubjectsInput>, SchoolUncheckedUpdateWithoutSubjectsInput>
  }

  export type SubjectUpdateOneRequiredWithoutSchoolsAttachedNestedInput = {
    create?: XOR<SubjectCreateWithoutSchoolsAttachedInput, SubjectUncheckedCreateWithoutSchoolsAttachedInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutSchoolsAttachedInput
    upsert?: SubjectUpsertWithoutSchoolsAttachedInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutSchoolsAttachedInput, SubjectUpdateWithoutSchoolsAttachedInput>, SubjectUncheckedUpdateWithoutSchoolsAttachedInput>
  }

  export type SchoolCreateNestedManyWithoutDistrictInput = {
    create?: XOR<SchoolCreateWithoutDistrictInput, SchoolUncheckedCreateWithoutDistrictInput> | SchoolCreateWithoutDistrictInput[] | SchoolUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutDistrictInput | SchoolCreateOrConnectWithoutDistrictInput[]
    createMany?: SchoolCreateManyDistrictInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type SchoolUncheckedCreateNestedManyWithoutDistrictInput = {
    create?: XOR<SchoolCreateWithoutDistrictInput, SchoolUncheckedCreateWithoutDistrictInput> | SchoolCreateWithoutDistrictInput[] | SchoolUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutDistrictInput | SchoolCreateOrConnectWithoutDistrictInput[]
    createMany?: SchoolCreateManyDistrictInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type SchoolUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<SchoolCreateWithoutDistrictInput, SchoolUncheckedCreateWithoutDistrictInput> | SchoolCreateWithoutDistrictInput[] | SchoolUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutDistrictInput | SchoolCreateOrConnectWithoutDistrictInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutDistrictInput | SchoolUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: SchoolCreateManyDistrictInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutDistrictInput | SchoolUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutDistrictInput | SchoolUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type SchoolUncheckedUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<SchoolCreateWithoutDistrictInput, SchoolUncheckedCreateWithoutDistrictInput> | SchoolCreateWithoutDistrictInput[] | SchoolUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutDistrictInput | SchoolCreateOrConnectWithoutDistrictInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutDistrictInput | SchoolUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: SchoolCreateManyDistrictInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutDistrictInput | SchoolUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutDistrictInput | SchoolUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPhotoTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoType | EnumPhotoTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoTypeFilter<$PrismaModel> | $Enums.PhotoType
  }

  export type NestedEnumPhotoTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoType | EnumPhotoTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoTypeWithAggregatesFilter<$PrismaModel> | $Enums.PhotoType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhotoTypeFilter<$PrismaModel>
    _max?: NestedEnumPhotoTypeFilter<$PrismaModel>
  }

  export type SchoolReviewCreateWithoutUserInput = {
    title: string
    review: string
    rating: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    school: SchoolCreateNestedOneWithoutReviewsInput
  }

  export type SchoolReviewUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    review: string
    rating: number
    schoolId: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SchoolReviewCreateOrConnectWithoutUserInput = {
    where: SchoolReviewWhereUniqueInput
    create: XOR<SchoolReviewCreateWithoutUserInput, SchoolReviewUncheckedCreateWithoutUserInput>
  }

  export type SchoolReviewCreateManyUserInputEnvelope = {
    data: SchoolReviewCreateManyUserInput | SchoolReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SchoolReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: SchoolReviewWhereUniqueInput
    update: XOR<SchoolReviewUpdateWithoutUserInput, SchoolReviewUncheckedUpdateWithoutUserInput>
    create: XOR<SchoolReviewCreateWithoutUserInput, SchoolReviewUncheckedCreateWithoutUserInput>
  }

  export type SchoolReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: SchoolReviewWhereUniqueInput
    data: XOR<SchoolReviewUpdateWithoutUserInput, SchoolReviewUncheckedUpdateWithoutUserInput>
  }

  export type SchoolReviewUpdateManyWithWhereWithoutUserInput = {
    where: SchoolReviewScalarWhereInput
    data: XOR<SchoolReviewUpdateManyMutationInput, SchoolReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type SchoolReviewScalarWhereInput = {
    AND?: SchoolReviewScalarWhereInput | SchoolReviewScalarWhereInput[]
    OR?: SchoolReviewScalarWhereInput[]
    NOT?: SchoolReviewScalarWhereInput | SchoolReviewScalarWhereInput[]
    id?: IntFilter<"SchoolReview"> | number
    title?: StringFilter<"SchoolReview"> | string
    review?: StringFilter<"SchoolReview"> | string
    rating?: IntFilter<"SchoolReview"> | number
    userId?: IntNullableFilter<"SchoolReview"> | number | null
    schoolId?: IntFilter<"SchoolReview"> | number
    createdAt?: DateTimeFilter<"SchoolReview"> | Date | string
    deletedAt?: DateTimeNullableFilter<"SchoolReview"> | Date | string | null
  }

  export type DistrictCreateWithoutSchoolsInput = {
    name: string
    region?: string | null
  }

  export type DistrictUncheckedCreateWithoutSchoolsInput = {
    id?: number
    name: string
    region?: string | null
  }

  export type DistrictCreateOrConnectWithoutSchoolsInput = {
    where: DistrictWhereUniqueInput
    create: XOR<DistrictCreateWithoutSchoolsInput, DistrictUncheckedCreateWithoutSchoolsInput>
  }

  export type CurriculumCreateWithoutSchoolsInput = {
    name: string
    description?: string | null
    subjects?: SubjectCreateNestedManyWithoutCurriculumInput
    levels?: AcademicLevelCreateNestedManyWithoutCurriculumInput
  }

  export type CurriculumUncheckedCreateWithoutSchoolsInput = {
    id?: number
    name: string
    description?: string | null
    subjects?: SubjectUncheckedCreateNestedManyWithoutCurriculumInput
    levels?: AcademicLevelUncheckedCreateNestedManyWithoutCurriculumInput
  }

  export type CurriculumCreateOrConnectWithoutSchoolsInput = {
    where: CurriculumWhereUniqueInput
    create: XOR<CurriculumCreateWithoutSchoolsInput, CurriculumUncheckedCreateWithoutSchoolsInput>
  }

  export type AcademicLevelCreateWithoutSchoolsInput = {
    level: string
    subjects?: SubjectCreateNestedManyWithoutAcademicLevelInput
    curriculum?: CurriculumCreateNestedOneWithoutLevelsInput
  }

  export type AcademicLevelUncheckedCreateWithoutSchoolsInput = {
    id?: number
    level: string
    curriculumId?: number | null
    subjects?: SubjectUncheckedCreateNestedManyWithoutAcademicLevelInput
  }

  export type AcademicLevelCreateOrConnectWithoutSchoolsInput = {
    where: AcademicLevelWhereUniqueInput
    create: XOR<AcademicLevelCreateWithoutSchoolsInput, AcademicLevelUncheckedCreateWithoutSchoolsInput>
  }

  export type SchoolPhotoCreateWithoutSchoolInput = {
    path: string
    type?: $Enums.PhotoType
    createdAt?: Date | string
  }

  export type SchoolPhotoUncheckedCreateWithoutSchoolInput = {
    id?: number
    path: string
    type?: $Enums.PhotoType
    createdAt?: Date | string
  }

  export type SchoolPhotoCreateOrConnectWithoutSchoolInput = {
    where: SchoolPhotoWhereUniqueInput
    create: XOR<SchoolPhotoCreateWithoutSchoolInput, SchoolPhotoUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolPhotoCreateManySchoolInputEnvelope = {
    data: SchoolPhotoCreateManySchoolInput | SchoolPhotoCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type SchoolReviewCreateWithoutSchoolInput = {
    title: string
    review: string
    rating: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutSchoolReviewsInput
  }

  export type SchoolReviewUncheckedCreateWithoutSchoolInput = {
    id?: number
    title: string
    review: string
    rating: number
    userId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SchoolReviewCreateOrConnectWithoutSchoolInput = {
    where: SchoolReviewWhereUniqueInput
    create: XOR<SchoolReviewCreateWithoutSchoolInput, SchoolReviewUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolReviewCreateManySchoolInputEnvelope = {
    data: SchoolReviewCreateManySchoolInput | SchoolReviewCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type SchoolSubjectCreateWithoutSchoolInput = {
    subject: SubjectCreateNestedOneWithoutSchoolsAttachedInput
  }

  export type SchoolSubjectUncheckedCreateWithoutSchoolInput = {
    id?: number
    subjectId: number
  }

  export type SchoolSubjectCreateOrConnectWithoutSchoolInput = {
    where: SchoolSubjectWhereUniqueInput
    create: XOR<SchoolSubjectCreateWithoutSchoolInput, SchoolSubjectUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolSubjectCreateManySchoolInputEnvelope = {
    data: SchoolSubjectCreateManySchoolInput | SchoolSubjectCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type DistrictUpsertWithoutSchoolsInput = {
    update: XOR<DistrictUpdateWithoutSchoolsInput, DistrictUncheckedUpdateWithoutSchoolsInput>
    create: XOR<DistrictCreateWithoutSchoolsInput, DistrictUncheckedCreateWithoutSchoolsInput>
    where?: DistrictWhereInput
  }

  export type DistrictUpdateToOneWithWhereWithoutSchoolsInput = {
    where?: DistrictWhereInput
    data: XOR<DistrictUpdateWithoutSchoolsInput, DistrictUncheckedUpdateWithoutSchoolsInput>
  }

  export type DistrictUpdateWithoutSchoolsInput = {
    name?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistrictUncheckedUpdateWithoutSchoolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CurriculumUpsertWithoutSchoolsInput = {
    update: XOR<CurriculumUpdateWithoutSchoolsInput, CurriculumUncheckedUpdateWithoutSchoolsInput>
    create: XOR<CurriculumCreateWithoutSchoolsInput, CurriculumUncheckedCreateWithoutSchoolsInput>
    where?: CurriculumWhereInput
  }

  export type CurriculumUpdateToOneWithWhereWithoutSchoolsInput = {
    where?: CurriculumWhereInput
    data: XOR<CurriculumUpdateWithoutSchoolsInput, CurriculumUncheckedUpdateWithoutSchoolsInput>
  }

  export type CurriculumUpdateWithoutSchoolsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjects?: SubjectUpdateManyWithoutCurriculumNestedInput
    levels?: AcademicLevelUpdateManyWithoutCurriculumNestedInput
  }

  export type CurriculumUncheckedUpdateWithoutSchoolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjects?: SubjectUncheckedUpdateManyWithoutCurriculumNestedInput
    levels?: AcademicLevelUncheckedUpdateManyWithoutCurriculumNestedInput
  }

  export type AcademicLevelUpsertWithoutSchoolsInput = {
    update: XOR<AcademicLevelUpdateWithoutSchoolsInput, AcademicLevelUncheckedUpdateWithoutSchoolsInput>
    create: XOR<AcademicLevelCreateWithoutSchoolsInput, AcademicLevelUncheckedCreateWithoutSchoolsInput>
    where?: AcademicLevelWhereInput
  }

  export type AcademicLevelUpdateToOneWithWhereWithoutSchoolsInput = {
    where?: AcademicLevelWhereInput
    data: XOR<AcademicLevelUpdateWithoutSchoolsInput, AcademicLevelUncheckedUpdateWithoutSchoolsInput>
  }

  export type AcademicLevelUpdateWithoutSchoolsInput = {
    level?: StringFieldUpdateOperationsInput | string
    subjects?: SubjectUpdateManyWithoutAcademicLevelNestedInput
    curriculum?: CurriculumUpdateOneWithoutLevelsNestedInput
  }

  export type AcademicLevelUncheckedUpdateWithoutSchoolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    subjects?: SubjectUncheckedUpdateManyWithoutAcademicLevelNestedInput
  }

  export type SchoolPhotoUpsertWithWhereUniqueWithoutSchoolInput = {
    where: SchoolPhotoWhereUniqueInput
    update: XOR<SchoolPhotoUpdateWithoutSchoolInput, SchoolPhotoUncheckedUpdateWithoutSchoolInput>
    create: XOR<SchoolPhotoCreateWithoutSchoolInput, SchoolPhotoUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolPhotoUpdateWithWhereUniqueWithoutSchoolInput = {
    where: SchoolPhotoWhereUniqueInput
    data: XOR<SchoolPhotoUpdateWithoutSchoolInput, SchoolPhotoUncheckedUpdateWithoutSchoolInput>
  }

  export type SchoolPhotoUpdateManyWithWhereWithoutSchoolInput = {
    where: SchoolPhotoScalarWhereInput
    data: XOR<SchoolPhotoUpdateManyMutationInput, SchoolPhotoUncheckedUpdateManyWithoutSchoolInput>
  }

  export type SchoolPhotoScalarWhereInput = {
    AND?: SchoolPhotoScalarWhereInput | SchoolPhotoScalarWhereInput[]
    OR?: SchoolPhotoScalarWhereInput[]
    NOT?: SchoolPhotoScalarWhereInput | SchoolPhotoScalarWhereInput[]
    id?: IntFilter<"SchoolPhoto"> | number
    path?: StringFilter<"SchoolPhoto"> | string
    type?: EnumPhotoTypeFilter<"SchoolPhoto"> | $Enums.PhotoType
    schoolId?: IntNullableFilter<"SchoolPhoto"> | number | null
    createdAt?: DateTimeFilter<"SchoolPhoto"> | Date | string
  }

  export type SchoolReviewUpsertWithWhereUniqueWithoutSchoolInput = {
    where: SchoolReviewWhereUniqueInput
    update: XOR<SchoolReviewUpdateWithoutSchoolInput, SchoolReviewUncheckedUpdateWithoutSchoolInput>
    create: XOR<SchoolReviewCreateWithoutSchoolInput, SchoolReviewUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolReviewUpdateWithWhereUniqueWithoutSchoolInput = {
    where: SchoolReviewWhereUniqueInput
    data: XOR<SchoolReviewUpdateWithoutSchoolInput, SchoolReviewUncheckedUpdateWithoutSchoolInput>
  }

  export type SchoolReviewUpdateManyWithWhereWithoutSchoolInput = {
    where: SchoolReviewScalarWhereInput
    data: XOR<SchoolReviewUpdateManyMutationInput, SchoolReviewUncheckedUpdateManyWithoutSchoolInput>
  }

  export type SchoolSubjectUpsertWithWhereUniqueWithoutSchoolInput = {
    where: SchoolSubjectWhereUniqueInput
    update: XOR<SchoolSubjectUpdateWithoutSchoolInput, SchoolSubjectUncheckedUpdateWithoutSchoolInput>
    create: XOR<SchoolSubjectCreateWithoutSchoolInput, SchoolSubjectUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolSubjectUpdateWithWhereUniqueWithoutSchoolInput = {
    where: SchoolSubjectWhereUniqueInput
    data: XOR<SchoolSubjectUpdateWithoutSchoolInput, SchoolSubjectUncheckedUpdateWithoutSchoolInput>
  }

  export type SchoolSubjectUpdateManyWithWhereWithoutSchoolInput = {
    where: SchoolSubjectScalarWhereInput
    data: XOR<SchoolSubjectUpdateManyMutationInput, SchoolSubjectUncheckedUpdateManyWithoutSchoolInput>
  }

  export type SchoolSubjectScalarWhereInput = {
    AND?: SchoolSubjectScalarWhereInput | SchoolSubjectScalarWhereInput[]
    OR?: SchoolSubjectScalarWhereInput[]
    NOT?: SchoolSubjectScalarWhereInput | SchoolSubjectScalarWhereInput[]
    id?: IntFilter<"SchoolSubject"> | number
    schoolId?: IntFilter<"SchoolSubject"> | number
    subjectId?: IntFilter<"SchoolSubject"> | number
  }

  export type UserCreateWithoutSchoolReviewsInput = {
    email: string
    name?: string | null
  }

  export type UserUncheckedCreateWithoutSchoolReviewsInput = {
    id?: number
    email: string
    name?: string | null
  }

  export type UserCreateOrConnectWithoutSchoolReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSchoolReviewsInput, UserUncheckedCreateWithoutSchoolReviewsInput>
  }

  export type SchoolCreateWithoutReviewsInput = {
    name: string
    address?: string | null
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    district: DistrictCreateNestedOneWithoutSchoolsInput
    curriculum?: CurriculumCreateNestedOneWithoutSchoolsInput
    academicLevel?: AcademicLevelCreateNestedOneWithoutSchoolsInput
    photos?: SchoolPhotoCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutReviewsInput = {
    id?: number
    name: string
    address?: string | null
    districtId: number
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    curriculumId?: number | null
    academicLevelId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    photos?: SchoolPhotoUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutReviewsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutReviewsInput, SchoolUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutSchoolReviewsInput = {
    update: XOR<UserUpdateWithoutSchoolReviewsInput, UserUncheckedUpdateWithoutSchoolReviewsInput>
    create: XOR<UserCreateWithoutSchoolReviewsInput, UserUncheckedCreateWithoutSchoolReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSchoolReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSchoolReviewsInput, UserUncheckedUpdateWithoutSchoolReviewsInput>
  }

  export type UserUpdateWithoutSchoolReviewsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutSchoolReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchoolUpsertWithoutReviewsInput = {
    update: XOR<SchoolUpdateWithoutReviewsInput, SchoolUncheckedUpdateWithoutReviewsInput>
    create: XOR<SchoolCreateWithoutReviewsInput, SchoolUncheckedCreateWithoutReviewsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutReviewsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutReviewsInput, SchoolUncheckedUpdateWithoutReviewsInput>
  }

  export type SchoolUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    district?: DistrictUpdateOneRequiredWithoutSchoolsNestedInput
    curriculum?: CurriculumUpdateOneWithoutSchoolsNestedInput
    academicLevel?: AcademicLevelUpdateOneWithoutSchoolsNestedInput
    photos?: SchoolPhotoUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photos?: SchoolPhotoUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateWithoutPhotosInput = {
    name: string
    address?: string | null
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    district: DistrictCreateNestedOneWithoutSchoolsInput
    curriculum?: CurriculumCreateNestedOneWithoutSchoolsInput
    academicLevel?: AcademicLevelCreateNestedOneWithoutSchoolsInput
    reviews?: SchoolReviewCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutPhotosInput = {
    id?: number
    name: string
    address?: string | null
    districtId: number
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    curriculumId?: number | null
    academicLevelId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    reviews?: SchoolReviewUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutPhotosInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutPhotosInput, SchoolUncheckedCreateWithoutPhotosInput>
  }

  export type SchoolUpsertWithoutPhotosInput = {
    update: XOR<SchoolUpdateWithoutPhotosInput, SchoolUncheckedUpdateWithoutPhotosInput>
    create: XOR<SchoolCreateWithoutPhotosInput, SchoolUncheckedCreateWithoutPhotosInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutPhotosInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutPhotosInput, SchoolUncheckedUpdateWithoutPhotosInput>
  }

  export type SchoolUpdateWithoutPhotosInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    district?: DistrictUpdateOneRequiredWithoutSchoolsNestedInput
    curriculum?: CurriculumUpdateOneWithoutSchoolsNestedInput
    academicLevel?: AcademicLevelUpdateOneWithoutSchoolsNestedInput
    reviews?: SchoolReviewUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutPhotosInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviews?: SchoolReviewUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateWithoutAcademicLevelInput = {
    name: string
    address?: string | null
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    district: DistrictCreateNestedOneWithoutSchoolsInput
    curriculum?: CurriculumCreateNestedOneWithoutSchoolsInput
    photos?: SchoolPhotoCreateNestedManyWithoutSchoolInput
    reviews?: SchoolReviewCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutAcademicLevelInput = {
    id?: number
    name: string
    address?: string | null
    districtId: number
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    curriculumId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    photos?: SchoolPhotoUncheckedCreateNestedManyWithoutSchoolInput
    reviews?: SchoolReviewUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutAcademicLevelInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutAcademicLevelInput, SchoolUncheckedCreateWithoutAcademicLevelInput>
  }

  export type SchoolCreateManyAcademicLevelInputEnvelope = {
    data: SchoolCreateManyAcademicLevelInput | SchoolCreateManyAcademicLevelInput[]
    skipDuplicates?: boolean
  }

  export type SubjectCreateWithoutAcademicLevelInput = {
    subject: string
    curriculum?: CurriculumCreateNestedOneWithoutSubjectsInput
    schoolsAttached?: SchoolSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutAcademicLevelInput = {
    id?: number
    curriculumId?: number | null
    subject: string
    schoolsAttached?: SchoolSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutAcademicLevelInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutAcademicLevelInput, SubjectUncheckedCreateWithoutAcademicLevelInput>
  }

  export type SubjectCreateManyAcademicLevelInputEnvelope = {
    data: SubjectCreateManyAcademicLevelInput | SubjectCreateManyAcademicLevelInput[]
    skipDuplicates?: boolean
  }

  export type CurriculumCreateWithoutLevelsInput = {
    name: string
    description?: string | null
    schools?: SchoolCreateNestedManyWithoutCurriculumInput
    subjects?: SubjectCreateNestedManyWithoutCurriculumInput
  }

  export type CurriculumUncheckedCreateWithoutLevelsInput = {
    id?: number
    name: string
    description?: string | null
    schools?: SchoolUncheckedCreateNestedManyWithoutCurriculumInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutCurriculumInput
  }

  export type CurriculumCreateOrConnectWithoutLevelsInput = {
    where: CurriculumWhereUniqueInput
    create: XOR<CurriculumCreateWithoutLevelsInput, CurriculumUncheckedCreateWithoutLevelsInput>
  }

  export type SchoolUpsertWithWhereUniqueWithoutAcademicLevelInput = {
    where: SchoolWhereUniqueInput
    update: XOR<SchoolUpdateWithoutAcademicLevelInput, SchoolUncheckedUpdateWithoutAcademicLevelInput>
    create: XOR<SchoolCreateWithoutAcademicLevelInput, SchoolUncheckedCreateWithoutAcademicLevelInput>
  }

  export type SchoolUpdateWithWhereUniqueWithoutAcademicLevelInput = {
    where: SchoolWhereUniqueInput
    data: XOR<SchoolUpdateWithoutAcademicLevelInput, SchoolUncheckedUpdateWithoutAcademicLevelInput>
  }

  export type SchoolUpdateManyWithWhereWithoutAcademicLevelInput = {
    where: SchoolScalarWhereInput
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyWithoutAcademicLevelInput>
  }

  export type SchoolScalarWhereInput = {
    AND?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
    OR?: SchoolScalarWhereInput[]
    NOT?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
    id?: IntFilter<"School"> | number
    name?: StringFilter<"School"> | string
    address?: StringNullableFilter<"School"> | string | null
    districtId?: IntFilter<"School"> | number
    about?: StringNullableFilter<"School"> | string | null
    history?: StringNullableFilter<"School"> | string | null
    phoneNumber?: StringNullableFilter<"School"> | string | null
    email?: StringNullableFilter<"School"> | string | null
    curriculumId?: IntNullableFilter<"School"> | number | null
    academicLevelId?: IntNullableFilter<"School"> | number | null
    createdAt?: DateTimeFilter<"School"> | Date | string
    deletedAt?: DateTimeNullableFilter<"School"> | Date | string | null
  }

  export type SubjectUpsertWithWhereUniqueWithoutAcademicLevelInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutAcademicLevelInput, SubjectUncheckedUpdateWithoutAcademicLevelInput>
    create: XOR<SubjectCreateWithoutAcademicLevelInput, SubjectUncheckedCreateWithoutAcademicLevelInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutAcademicLevelInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutAcademicLevelInput, SubjectUncheckedUpdateWithoutAcademicLevelInput>
  }

  export type SubjectUpdateManyWithWhereWithoutAcademicLevelInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutAcademicLevelInput>
  }

  export type SubjectScalarWhereInput = {
    AND?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    OR?: SubjectScalarWhereInput[]
    NOT?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    id?: IntFilter<"Subject"> | number
    curriculumId?: IntNullableFilter<"Subject"> | number | null
    subject?: StringFilter<"Subject"> | string
    academicLevelId?: IntNullableFilter<"Subject"> | number | null
  }

  export type CurriculumUpsertWithoutLevelsInput = {
    update: XOR<CurriculumUpdateWithoutLevelsInput, CurriculumUncheckedUpdateWithoutLevelsInput>
    create: XOR<CurriculumCreateWithoutLevelsInput, CurriculumUncheckedCreateWithoutLevelsInput>
    where?: CurriculumWhereInput
  }

  export type CurriculumUpdateToOneWithWhereWithoutLevelsInput = {
    where?: CurriculumWhereInput
    data: XOR<CurriculumUpdateWithoutLevelsInput, CurriculumUncheckedUpdateWithoutLevelsInput>
  }

  export type CurriculumUpdateWithoutLevelsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schools?: SchoolUpdateManyWithoutCurriculumNestedInput
    subjects?: SubjectUpdateManyWithoutCurriculumNestedInput
  }

  export type CurriculumUncheckedUpdateWithoutLevelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schools?: SchoolUncheckedUpdateManyWithoutCurriculumNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutCurriculumNestedInput
  }

  export type SchoolCreateWithoutCurriculumInput = {
    name: string
    address?: string | null
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    district: DistrictCreateNestedOneWithoutSchoolsInput
    academicLevel?: AcademicLevelCreateNestedOneWithoutSchoolsInput
    photos?: SchoolPhotoCreateNestedManyWithoutSchoolInput
    reviews?: SchoolReviewCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutCurriculumInput = {
    id?: number
    name: string
    address?: string | null
    districtId: number
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    academicLevelId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    photos?: SchoolPhotoUncheckedCreateNestedManyWithoutSchoolInput
    reviews?: SchoolReviewUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutCurriculumInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutCurriculumInput, SchoolUncheckedCreateWithoutCurriculumInput>
  }

  export type SchoolCreateManyCurriculumInputEnvelope = {
    data: SchoolCreateManyCurriculumInput | SchoolCreateManyCurriculumInput[]
    skipDuplicates?: boolean
  }

  export type SubjectCreateWithoutCurriculumInput = {
    subject: string
    academicLevel?: AcademicLevelCreateNestedOneWithoutSubjectsInput
    schoolsAttached?: SchoolSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutCurriculumInput = {
    id?: number
    subject: string
    academicLevelId?: number | null
    schoolsAttached?: SchoolSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutCurriculumInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutCurriculumInput, SubjectUncheckedCreateWithoutCurriculumInput>
  }

  export type SubjectCreateManyCurriculumInputEnvelope = {
    data: SubjectCreateManyCurriculumInput | SubjectCreateManyCurriculumInput[]
    skipDuplicates?: boolean
  }

  export type AcademicLevelCreateWithoutCurriculumInput = {
    level: string
    schools?: SchoolCreateNestedManyWithoutAcademicLevelInput
    subjects?: SubjectCreateNestedManyWithoutAcademicLevelInput
  }

  export type AcademicLevelUncheckedCreateWithoutCurriculumInput = {
    id?: number
    level: string
    schools?: SchoolUncheckedCreateNestedManyWithoutAcademicLevelInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutAcademicLevelInput
  }

  export type AcademicLevelCreateOrConnectWithoutCurriculumInput = {
    where: AcademicLevelWhereUniqueInput
    create: XOR<AcademicLevelCreateWithoutCurriculumInput, AcademicLevelUncheckedCreateWithoutCurriculumInput>
  }

  export type AcademicLevelCreateManyCurriculumInputEnvelope = {
    data: AcademicLevelCreateManyCurriculumInput | AcademicLevelCreateManyCurriculumInput[]
    skipDuplicates?: boolean
  }

  export type SchoolUpsertWithWhereUniqueWithoutCurriculumInput = {
    where: SchoolWhereUniqueInput
    update: XOR<SchoolUpdateWithoutCurriculumInput, SchoolUncheckedUpdateWithoutCurriculumInput>
    create: XOR<SchoolCreateWithoutCurriculumInput, SchoolUncheckedCreateWithoutCurriculumInput>
  }

  export type SchoolUpdateWithWhereUniqueWithoutCurriculumInput = {
    where: SchoolWhereUniqueInput
    data: XOR<SchoolUpdateWithoutCurriculumInput, SchoolUncheckedUpdateWithoutCurriculumInput>
  }

  export type SchoolUpdateManyWithWhereWithoutCurriculumInput = {
    where: SchoolScalarWhereInput
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyWithoutCurriculumInput>
  }

  export type SubjectUpsertWithWhereUniqueWithoutCurriculumInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutCurriculumInput, SubjectUncheckedUpdateWithoutCurriculumInput>
    create: XOR<SubjectCreateWithoutCurriculumInput, SubjectUncheckedCreateWithoutCurriculumInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutCurriculumInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutCurriculumInput, SubjectUncheckedUpdateWithoutCurriculumInput>
  }

  export type SubjectUpdateManyWithWhereWithoutCurriculumInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutCurriculumInput>
  }

  export type AcademicLevelUpsertWithWhereUniqueWithoutCurriculumInput = {
    where: AcademicLevelWhereUniqueInput
    update: XOR<AcademicLevelUpdateWithoutCurriculumInput, AcademicLevelUncheckedUpdateWithoutCurriculumInput>
    create: XOR<AcademicLevelCreateWithoutCurriculumInput, AcademicLevelUncheckedCreateWithoutCurriculumInput>
  }

  export type AcademicLevelUpdateWithWhereUniqueWithoutCurriculumInput = {
    where: AcademicLevelWhereUniqueInput
    data: XOR<AcademicLevelUpdateWithoutCurriculumInput, AcademicLevelUncheckedUpdateWithoutCurriculumInput>
  }

  export type AcademicLevelUpdateManyWithWhereWithoutCurriculumInput = {
    where: AcademicLevelScalarWhereInput
    data: XOR<AcademicLevelUpdateManyMutationInput, AcademicLevelUncheckedUpdateManyWithoutCurriculumInput>
  }

  export type AcademicLevelScalarWhereInput = {
    AND?: AcademicLevelScalarWhereInput | AcademicLevelScalarWhereInput[]
    OR?: AcademicLevelScalarWhereInput[]
    NOT?: AcademicLevelScalarWhereInput | AcademicLevelScalarWhereInput[]
    id?: IntFilter<"AcademicLevel"> | number
    level?: StringFilter<"AcademicLevel"> | string
    curriculumId?: IntNullableFilter<"AcademicLevel"> | number | null
  }

  export type CurriculumCreateWithoutSubjectsInput = {
    name: string
    description?: string | null
    schools?: SchoolCreateNestedManyWithoutCurriculumInput
    levels?: AcademicLevelCreateNestedManyWithoutCurriculumInput
  }

  export type CurriculumUncheckedCreateWithoutSubjectsInput = {
    id?: number
    name: string
    description?: string | null
    schools?: SchoolUncheckedCreateNestedManyWithoutCurriculumInput
    levels?: AcademicLevelUncheckedCreateNestedManyWithoutCurriculumInput
  }

  export type CurriculumCreateOrConnectWithoutSubjectsInput = {
    where: CurriculumWhereUniqueInput
    create: XOR<CurriculumCreateWithoutSubjectsInput, CurriculumUncheckedCreateWithoutSubjectsInput>
  }

  export type AcademicLevelCreateWithoutSubjectsInput = {
    level: string
    schools?: SchoolCreateNestedManyWithoutAcademicLevelInput
    curriculum?: CurriculumCreateNestedOneWithoutLevelsInput
  }

  export type AcademicLevelUncheckedCreateWithoutSubjectsInput = {
    id?: number
    level: string
    curriculumId?: number | null
    schools?: SchoolUncheckedCreateNestedManyWithoutAcademicLevelInput
  }

  export type AcademicLevelCreateOrConnectWithoutSubjectsInput = {
    where: AcademicLevelWhereUniqueInput
    create: XOR<AcademicLevelCreateWithoutSubjectsInput, AcademicLevelUncheckedCreateWithoutSubjectsInput>
  }

  export type SchoolSubjectCreateWithoutSubjectInput = {
    school: SchoolCreateNestedOneWithoutSubjectsInput
  }

  export type SchoolSubjectUncheckedCreateWithoutSubjectInput = {
    id?: number
    schoolId: number
  }

  export type SchoolSubjectCreateOrConnectWithoutSubjectInput = {
    where: SchoolSubjectWhereUniqueInput
    create: XOR<SchoolSubjectCreateWithoutSubjectInput, SchoolSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type SchoolSubjectCreateManySubjectInputEnvelope = {
    data: SchoolSubjectCreateManySubjectInput | SchoolSubjectCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type CurriculumUpsertWithoutSubjectsInput = {
    update: XOR<CurriculumUpdateWithoutSubjectsInput, CurriculumUncheckedUpdateWithoutSubjectsInput>
    create: XOR<CurriculumCreateWithoutSubjectsInput, CurriculumUncheckedCreateWithoutSubjectsInput>
    where?: CurriculumWhereInput
  }

  export type CurriculumUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: CurriculumWhereInput
    data: XOR<CurriculumUpdateWithoutSubjectsInput, CurriculumUncheckedUpdateWithoutSubjectsInput>
  }

  export type CurriculumUpdateWithoutSubjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schools?: SchoolUpdateManyWithoutCurriculumNestedInput
    levels?: AcademicLevelUpdateManyWithoutCurriculumNestedInput
  }

  export type CurriculumUncheckedUpdateWithoutSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schools?: SchoolUncheckedUpdateManyWithoutCurriculumNestedInput
    levels?: AcademicLevelUncheckedUpdateManyWithoutCurriculumNestedInput
  }

  export type AcademicLevelUpsertWithoutSubjectsInput = {
    update: XOR<AcademicLevelUpdateWithoutSubjectsInput, AcademicLevelUncheckedUpdateWithoutSubjectsInput>
    create: XOR<AcademicLevelCreateWithoutSubjectsInput, AcademicLevelUncheckedCreateWithoutSubjectsInput>
    where?: AcademicLevelWhereInput
  }

  export type AcademicLevelUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: AcademicLevelWhereInput
    data: XOR<AcademicLevelUpdateWithoutSubjectsInput, AcademicLevelUncheckedUpdateWithoutSubjectsInput>
  }

  export type AcademicLevelUpdateWithoutSubjectsInput = {
    level?: StringFieldUpdateOperationsInput | string
    schools?: SchoolUpdateManyWithoutAcademicLevelNestedInput
    curriculum?: CurriculumUpdateOneWithoutLevelsNestedInput
  }

  export type AcademicLevelUncheckedUpdateWithoutSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    schools?: SchoolUncheckedUpdateManyWithoutAcademicLevelNestedInput
  }

  export type SchoolSubjectUpsertWithWhereUniqueWithoutSubjectInput = {
    where: SchoolSubjectWhereUniqueInput
    update: XOR<SchoolSubjectUpdateWithoutSubjectInput, SchoolSubjectUncheckedUpdateWithoutSubjectInput>
    create: XOR<SchoolSubjectCreateWithoutSubjectInput, SchoolSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type SchoolSubjectUpdateWithWhereUniqueWithoutSubjectInput = {
    where: SchoolSubjectWhereUniqueInput
    data: XOR<SchoolSubjectUpdateWithoutSubjectInput, SchoolSubjectUncheckedUpdateWithoutSubjectInput>
  }

  export type SchoolSubjectUpdateManyWithWhereWithoutSubjectInput = {
    where: SchoolSubjectScalarWhereInput
    data: XOR<SchoolSubjectUpdateManyMutationInput, SchoolSubjectUncheckedUpdateManyWithoutSubjectInput>
  }

  export type SchoolCreateWithoutSubjectsInput = {
    name: string
    address?: string | null
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    district: DistrictCreateNestedOneWithoutSchoolsInput
    curriculum?: CurriculumCreateNestedOneWithoutSchoolsInput
    academicLevel?: AcademicLevelCreateNestedOneWithoutSchoolsInput
    photos?: SchoolPhotoCreateNestedManyWithoutSchoolInput
    reviews?: SchoolReviewCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutSubjectsInput = {
    id?: number
    name: string
    address?: string | null
    districtId: number
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    curriculumId?: number | null
    academicLevelId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    photos?: SchoolPhotoUncheckedCreateNestedManyWithoutSchoolInput
    reviews?: SchoolReviewUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutSubjectsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutSubjectsInput, SchoolUncheckedCreateWithoutSubjectsInput>
  }

  export type SubjectCreateWithoutSchoolsAttachedInput = {
    subject: string
    curriculum?: CurriculumCreateNestedOneWithoutSubjectsInput
    academicLevel?: AcademicLevelCreateNestedOneWithoutSubjectsInput
  }

  export type SubjectUncheckedCreateWithoutSchoolsAttachedInput = {
    id?: number
    curriculumId?: number | null
    subject: string
    academicLevelId?: number | null
  }

  export type SubjectCreateOrConnectWithoutSchoolsAttachedInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutSchoolsAttachedInput, SubjectUncheckedCreateWithoutSchoolsAttachedInput>
  }

  export type SchoolUpsertWithoutSubjectsInput = {
    update: XOR<SchoolUpdateWithoutSubjectsInput, SchoolUncheckedUpdateWithoutSubjectsInput>
    create: XOR<SchoolCreateWithoutSubjectsInput, SchoolUncheckedCreateWithoutSubjectsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutSubjectsInput, SchoolUncheckedUpdateWithoutSubjectsInput>
  }

  export type SchoolUpdateWithoutSubjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    district?: DistrictUpdateOneRequiredWithoutSchoolsNestedInput
    curriculum?: CurriculumUpdateOneWithoutSchoolsNestedInput
    academicLevel?: AcademicLevelUpdateOneWithoutSchoolsNestedInput
    photos?: SchoolPhotoUpdateManyWithoutSchoolNestedInput
    reviews?: SchoolReviewUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photos?: SchoolPhotoUncheckedUpdateManyWithoutSchoolNestedInput
    reviews?: SchoolReviewUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SubjectUpsertWithoutSchoolsAttachedInput = {
    update: XOR<SubjectUpdateWithoutSchoolsAttachedInput, SubjectUncheckedUpdateWithoutSchoolsAttachedInput>
    create: XOR<SubjectCreateWithoutSchoolsAttachedInput, SubjectUncheckedCreateWithoutSchoolsAttachedInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutSchoolsAttachedInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutSchoolsAttachedInput, SubjectUncheckedUpdateWithoutSchoolsAttachedInput>
  }

  export type SubjectUpdateWithoutSchoolsAttachedInput = {
    subject?: StringFieldUpdateOperationsInput | string
    curriculum?: CurriculumUpdateOneWithoutSubjectsNestedInput
    academicLevel?: AcademicLevelUpdateOneWithoutSubjectsNestedInput
  }

  export type SubjectUncheckedUpdateWithoutSchoolsAttachedInput = {
    id?: IntFieldUpdateOperationsInput | number
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    subject?: StringFieldUpdateOperationsInput | string
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SchoolCreateWithoutDistrictInput = {
    name: string
    address?: string | null
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    curriculum?: CurriculumCreateNestedOneWithoutSchoolsInput
    academicLevel?: AcademicLevelCreateNestedOneWithoutSchoolsInput
    photos?: SchoolPhotoCreateNestedManyWithoutSchoolInput
    reviews?: SchoolReviewCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutDistrictInput = {
    id?: number
    name: string
    address?: string | null
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    curriculumId?: number | null
    academicLevelId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    photos?: SchoolPhotoUncheckedCreateNestedManyWithoutSchoolInput
    reviews?: SchoolReviewUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SchoolSubjectUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutDistrictInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutDistrictInput, SchoolUncheckedCreateWithoutDistrictInput>
  }

  export type SchoolCreateManyDistrictInputEnvelope = {
    data: SchoolCreateManyDistrictInput | SchoolCreateManyDistrictInput[]
    skipDuplicates?: boolean
  }

  export type SchoolUpsertWithWhereUniqueWithoutDistrictInput = {
    where: SchoolWhereUniqueInput
    update: XOR<SchoolUpdateWithoutDistrictInput, SchoolUncheckedUpdateWithoutDistrictInput>
    create: XOR<SchoolCreateWithoutDistrictInput, SchoolUncheckedCreateWithoutDistrictInput>
  }

  export type SchoolUpdateWithWhereUniqueWithoutDistrictInput = {
    where: SchoolWhereUniqueInput
    data: XOR<SchoolUpdateWithoutDistrictInput, SchoolUncheckedUpdateWithoutDistrictInput>
  }

  export type SchoolUpdateManyWithWhereWithoutDistrictInput = {
    where: SchoolScalarWhereInput
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyWithoutDistrictInput>
  }

  export type SchoolReviewCreateManyUserInput = {
    id?: number
    title: string
    review: string
    rating: number
    schoolId: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SchoolReviewUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    review?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school?: SchoolUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type SchoolReviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    review?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolReviewUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    review?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolPhotoCreateManySchoolInput = {
    id?: number
    path: string
    type?: $Enums.PhotoType
    createdAt?: Date | string
  }

  export type SchoolReviewCreateManySchoolInput = {
    id?: number
    title: string
    review: string
    rating: number
    userId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SchoolSubjectCreateManySchoolInput = {
    id?: number
    subjectId: number
  }

  export type SchoolPhotoUpdateWithoutSchoolInput = {
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolPhotoUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolPhotoUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolReviewUpdateWithoutSchoolInput = {
    title?: StringFieldUpdateOperationsInput | string
    review?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutSchoolReviewsNestedInput
  }

  export type SchoolReviewUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    review?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolReviewUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    review?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolSubjectUpdateWithoutSchoolInput = {
    subject?: SubjectUpdateOneRequiredWithoutSchoolsAttachedNestedInput
  }

  export type SchoolSubjectUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type SchoolSubjectUncheckedUpdateManyWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type SchoolCreateManyAcademicLevelInput = {
    id?: number
    name: string
    address?: string | null
    districtId: number
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    curriculumId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SubjectCreateManyAcademicLevelInput = {
    id?: number
    curriculumId?: number | null
    subject: string
  }

  export type SchoolUpdateWithoutAcademicLevelInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    district?: DistrictUpdateOneRequiredWithoutSchoolsNestedInput
    curriculum?: CurriculumUpdateOneWithoutSchoolsNestedInput
    photos?: SchoolPhotoUpdateManyWithoutSchoolNestedInput
    reviews?: SchoolReviewUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutAcademicLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photos?: SchoolPhotoUncheckedUpdateManyWithoutSchoolNestedInput
    reviews?: SchoolReviewUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateManyWithoutAcademicLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubjectUpdateWithoutAcademicLevelInput = {
    subject?: StringFieldUpdateOperationsInput | string
    curriculum?: CurriculumUpdateOneWithoutSubjectsNestedInput
    schoolsAttached?: SchoolSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutAcademicLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    subject?: StringFieldUpdateOperationsInput | string
    schoolsAttached?: SchoolSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateManyWithoutAcademicLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type SchoolCreateManyCurriculumInput = {
    id?: number
    name: string
    address?: string | null
    districtId: number
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    academicLevelId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SubjectCreateManyCurriculumInput = {
    id?: number
    subject: string
    academicLevelId?: number | null
  }

  export type AcademicLevelCreateManyCurriculumInput = {
    id?: number
    level: string
  }

  export type SchoolUpdateWithoutCurriculumInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    district?: DistrictUpdateOneRequiredWithoutSchoolsNestedInput
    academicLevel?: AcademicLevelUpdateOneWithoutSchoolsNestedInput
    photos?: SchoolPhotoUpdateManyWithoutSchoolNestedInput
    reviews?: SchoolReviewUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutCurriculumInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photos?: SchoolPhotoUncheckedUpdateManyWithoutSchoolNestedInput
    reviews?: SchoolReviewUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateManyWithoutCurriculumInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: IntFieldUpdateOperationsInput | number
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubjectUpdateWithoutCurriculumInput = {
    subject?: StringFieldUpdateOperationsInput | string
    academicLevel?: AcademicLevelUpdateOneWithoutSubjectsNestedInput
    schoolsAttached?: SchoolSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutCurriculumInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    schoolsAttached?: SchoolSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateManyWithoutCurriculumInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AcademicLevelUpdateWithoutCurriculumInput = {
    level?: StringFieldUpdateOperationsInput | string
    schools?: SchoolUpdateManyWithoutAcademicLevelNestedInput
    subjects?: SubjectUpdateManyWithoutAcademicLevelNestedInput
  }

  export type AcademicLevelUncheckedUpdateWithoutCurriculumInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    schools?: SchoolUncheckedUpdateManyWithoutAcademicLevelNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutAcademicLevelNestedInput
  }

  export type AcademicLevelUncheckedUpdateManyWithoutCurriculumInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
  }

  export type SchoolSubjectCreateManySubjectInput = {
    id?: number
    schoolId: number
  }

  export type SchoolSubjectUpdateWithoutSubjectInput = {
    school?: SchoolUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type SchoolSubjectUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
  }

  export type SchoolSubjectUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
  }

  export type SchoolCreateManyDistrictInput = {
    id?: number
    name: string
    address?: string | null
    about?: string | null
    history?: string | null
    phoneNumber?: string | null
    email?: string | null
    curriculumId?: number | null
    academicLevelId?: number | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SchoolUpdateWithoutDistrictInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    curriculum?: CurriculumUpdateOneWithoutSchoolsNestedInput
    academicLevel?: AcademicLevelUpdateOneWithoutSchoolsNestedInput
    photos?: SchoolPhotoUpdateManyWithoutSchoolNestedInput
    reviews?: SchoolReviewUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutDistrictInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photos?: SchoolPhotoUncheckedUpdateManyWithoutSchoolNestedInput
    reviews?: SchoolReviewUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SchoolSubjectUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateManyWithoutDistrictInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    curriculumId?: NullableIntFieldUpdateOperationsInput | number | null
    academicLevelId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolCountOutputTypeDefaultArgs instead
     */
    export type SchoolCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AcademicLevelCountOutputTypeDefaultArgs instead
     */
    export type AcademicLevelCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AcademicLevelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CurriculumCountOutputTypeDefaultArgs instead
     */
    export type CurriculumCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CurriculumCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectCountOutputTypeDefaultArgs instead
     */
    export type SubjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DistrictCountOutputTypeDefaultArgs instead
     */
    export type DistrictCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DistrictCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolDefaultArgs instead
     */
    export type SchoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolReviewDefaultArgs instead
     */
    export type SchoolReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolPhotoDefaultArgs instead
     */
    export type SchoolPhotoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolPhotoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AcademicLevelDefaultArgs instead
     */
    export type AcademicLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AcademicLevelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CurriculumDefaultArgs instead
     */
    export type CurriculumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CurriculumDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectDefaultArgs instead
     */
    export type SubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolSubjectDefaultArgs instead
     */
    export type SchoolSubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolSubjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DistrictDefaultArgs instead
     */
    export type DistrictArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DistrictDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}